Command Injection:
    * CI is the abuse of an applications behaviour to execute commands on the OS, using the same privileges an app is running.
    *** Also known as Remote Code Execution!
    * RCE/CI on user Joe will result in executed commands under Joe's privileges on the web app.
    * Very lucrative, allows us to interact directly with the application.
    - Example: running whoami to list the user.
    - OWASP consistently ranks it top ten https://owasp.org/www-project-top-ten/
    
Why does CI exist?
    * Programming languages such as python, php make calls to the OS in the form of fxns. E.g taking input and searching for entry to file
    * E.g rather than using grep to search for song title on applications OS, attacker tries to read more sensitive info.

Exploiting CI/RCE:
    * We can determine whether or not CI works based on behaviour of application.
    * Crux: Applications taking user input to populate and perform system commands.
    ** Linux: shell operators ;, & and && will combine two (or more) system commands and execute them both.

Detecting CI: (2 ways)
    * Blind         There is no direct output when testing payloads.

    * Verbose       Direct feedback from the application when a payload is ran.
                    e.g running whoami and user printed on screen.

    Detecting Blind CI:
        - For this, we need to implement commands that cause some delay.
        - E.g sleep & ping. Ping causes the application to hang for x seconds based on ping val provided.

        - Can also force print. Done using redirect operations such as >.
        - Example: Use whoami and redirect output to a file. Use cat to read file.
        - Often complicated and experimental. (Windows vs Linux).
        - Curl is very effective. Allows delivery of info to and from an application from payload.

    Detecting Verbose CI:
        - Probably easier. Gives feedback as to what is happening or being executed.

        Useful Linux Commands:

        whoami      See what user the application is running under.
        ls	        List the contents of the current directory. You may be able to find files such as configuration files, environment files (tokens and application keys), and many more valuable things.
        ping	    This command will invoke the application to hang. This will be useful in testing an application for blind command injection.
        sleep	    This is another useful payload in testing an application for blind command injection, where the machine does not have ping installed.
        nc	        Netcat can be used to spawn a reverse shell onto the vulnerable application. You can use this foothold to navigate around the target machine for other services, files, or potential means of escalating privileges.


        Useful Windows Commands:

        whoami	    See what user the application is running under.
        dir	        List the contents of the current directory. You may be able to find files such as configuration files, environment files (tokens and application keys), and many more valuable things.
        ping	    This command will invoke the application to hang. This will be useful in testing an application for blind command injection.
        timeout	    This command will also invoke the application to hang. It is also useful for testing an application for blind command injection if the ping command is not installed.


Preventing Command Injection:
    * Minimal use of potentially dangerous libraries/functions.
    * Filtering input, not trusting what user provides.
    
    Vulnerable/dangerous functions (Linux): 
        - Exec
        - Passthru
        - System

    Example input filter:
        - <input type="text" id="ping" name="ping" pattern="[0-9]+"></input>
            <?php
            echo passthru("/bin/ping -c 4 $_GET["ping"].");
        
        - This checks that input is of pattern 0-9.
        - Only executes passthru if this is the case.

    Input Sanitisation:
        - Specifying the format or type of data the user can input.
        - Example: Removes special characters, only accepts numerical input.

        E.g     if (!filter_input(INPUT_GET, "number", FILTER_VALIDATE_NUMBER)) {}
        * This checks if input is a valid number. Invalid input if not a number.

    Bypassing Filters:
        * Trick: if quotes are being removed, use the hex value for quotes!
        * Or, URL encode. %3B for ;, %26 for &, and %7C for |
        

CHEAT SHEET COMMAND INJECTION:
https://github.com/payloadbox/command-injection-payload-list


Practical:
* We sent a request to 127.0.0.1/.../.../flag
* Using Burp Suite, intercepted and noted response:
* Use special characters, attempt to terminate input field with ;
* whoami reveals www-data
* Final command: 127.0.0.1; cat /home/tryhackme/flag.txt