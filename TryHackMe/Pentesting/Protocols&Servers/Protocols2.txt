Protocols and Servers 2: {TARGET 10.10.139.104} 

    INTRODUCTION:
        * We identified a number of protocols in the previous plaintext.
        * These are subject to attacks: Sniffing Attack (Network Packet Capture), Man-in-the-Middle (MITM) Attack, Password Attack (Authentication Attack), Vulnerabilities
        
        * Consider CIA & Corresponding DAD:
            C       [Confidentiality]           [Disclosure]
            I       [Integrity]                 [Alteration]
            A       [Availability]              [Destruction]

            ..where {Confidenitality keeps contents to intended parties.}
                    {Integrity assures data accurate, consistent, complete.}
                    {Availability is accessing service when required}
        * We will focus on 3 attacks:
            [Sniffing, MITM & password attacks (HYDRA!)]

        * We will also look at how protocols are upgraded or replaced to protect confidentiality and integrity.

    
    2. SNIFFING ATTACK:
        * Sniffing refers to using a network packet capture tool to collect info on target.
        * When a protocol uses plaintext to communicate, credentials and private messages can be captured.
        * Conducted using an Ethernet (802.3) network card, provided user has admin/sudo privileges.
        * Options for tools: {Wireshark, TCPDump, Tshark}

        * Though possible to capture credentials/ private with {Wireshark/ TCPdump}, specialised tools easier!
        * NEED ACCESS TO NETWORK TRAFFIC! Hence probably need a successful MITM attack.
            sudo tcpdump port 110 -A      port 110 specifies POP3     -A specifies ASCII format.
        * Wireshark: use filter (pop), examine info.
    

    3. MAN IN THE MIDDLE ATTACK (MITM):
        * When a victim unknowingly communicates with attacker, thinking they are communicating with legitimate.
        * Easy to carry out if: {TWO PARTIES DO NOT CHECK AUTHENTICITY AND INTEGRITY EVERY MESSAGE}
        * Whenever communicating over HTTP, susceptible to MITM.
        * MITM tools are: ettercap https://www.ettercap-project.org/ , Bettercap https://www.bettercap.org/
        * Mitigation against this attack is cryptography! Proper authentication, encryption/ signing.

        * {TLS PROTECTS US! Uses Public Key Infrastructure (PKI) and trusted root certificates.}
        

    4. TRANSPORT LAYER SECURITY (TLS):
        * Protects confidentiality and integrity of exchanged packets.
        * SSL (Secure Socket Layer) predates TLS.
        * Previously, protocols operated via the application layer.
        * OSI model: {We can add encryption to our protocols via the presentation layer!}
        * TLS >> SSL, rare that SSL has not been replaced. TLS more secure.
        * We can use TLS to upgrade FTTP, FTP, SMTP, POP3, and IMAP and more.
        
        {
            Protocol 	    Default Port 	Secured Protocol 	Default Port with TLS
            HTTP 	        80 	            HTTPS 	            443
            FTP 	        21 	            FTPS 	            990
            SMTP 	        25 	            SMTPS 	            465
            POP3 	        110 	        POP3S 	            995
            IMAP 	        143 	        IMAPS 	            993
        }

        HTTP vs HTTPS:
            * HTTP:     Establishes connection with 3-way TCP HS, Send GET/ POST requests to web server.
            * HTTPS:    Establishes TCP connection, establish TLS/SSL connection, send requests.
            * Where TLS connection governed by RFC 6101 https://datatracker.ietf.org/doc/html/rfc6101
        

        TLS HANDSHAKE:
            
            1.  The client sends a ClientHello to the server to indicate its capabilities, such as supported algorithms.
            2.  The server responds with a ServerHello, indicating the selected connection parameters. The server provides its certificate if server authentication is required. The certificate is a digital file to identify itself; it is usually digitally signed by a third party. Moreover, it might send additional information necessary to generate the master key, in its ServerKeyExchange message, before sending the ServerHelloDone message to indicate that it is done with the negotiation.
            3.  The client responds with a ClientKeyExchange, which contains additional information required to generate the master key. Furthermore, it switches to use encryption and informs the server using the ChangeCipherSpec message.
            4.  The server switches to use encryption as well and informs the client in the ChangeCipherSpec message.

            [Above, client was able to negotiate a secret key that has a public certificate!]
            [Secret key generated in secure manner, (sharing a secret without explicitly saying it)]
            [Further coms with the server are encrypted with this key!]

        ** WE RELY ON public certificates signed by certificate authorities trusted by our system.
        * i.e when we browse to THM over HTTPS, we expect web server to provide a signed cert from a trusted authority.

        * DNS using TLS?        DoT!

    

    5.  SECURE SHELL (SHH)
        * Provides secure remote administration.
        * Secure: [Confirm ID of server, exchanged messages encrypted, both sides detect modification] by some encryption algo.
        * SSH LISTENS ON PORT 22.
        * SSH Client authenticates either by {username and password} or {private and public key} (after SSH connection established, server recognises public key)
            ssh username@10.10.139.104
        * ALL COMMANDS EXECUTED ON REMOTE SYSTEM SENT OVER ENCRYPTED CHANNEL.

        * IF FIRST TIME CONNECTING: [Must confirm fingerprint of SSH server's public key (AVOIDS MITM)]
        * CAN USE SSH TO TRANSFER FILES WITH SCP (Secure Copy Protocol).
            scp mark@10.10.139.104:/home/mark/archive.tar.gz ~      copies archive.file to our ~ dir
        
        * FTP can be secured using TLS/SSL by using {FTPS protocol, port 990}
        * FTP can also be secured using SSH {SFTP protocol, port 22, like SSH}

        SCP, SSH TO DOWNLOAD FILE STEPS:
            {
                * Connect       ssh mark@10.10.139.104
                * Authenticate with password
                * Use ls/cd to navigate.
                * EXIT ssh
                * scp mark@10.10.139.104:~/book.txt .
            }


    6.  PASSWORD ATTACKS:
        * Authentication is performed using one or multiple of the following:
        [
            1. Something you know, such as password and PIN code.
            2. Something you have, such as a SIM card, RFID card, and USB dongle.
            3. Something you are, such as fingerprint and iris.
        ]

        * Password attacks are generally carried out by:
        [
            
            1. Password Guessing: Guessing a password requires some knowledge of the target, such as their pet’s name and birth year.
            2. Dictionary Attack: This approach expands on password guessing and attempts to include all valid words in a dictionary or a wordlist.
            3. Brute Force Attack: This attack is the most exhaustive and time-consuming where an attacker can go as far as trying all possible character combinations, which grows fast (exponential growth with the number of characters).

        ]

        * Dictionary attacks are useful, hackers compile wordlists of common passwords from leaks.
            RockYou’s list, /usr/share/wordlists/rockyou.txt
        
        * We want to automate method for trying common password: {use THC HYDRA!}
            https://github.com/vanhauser-thc/thc-hydra
        
        HYDRA Commands:
        [
            hydra -l username -P wordlist.txt server service            base format
            hydra -l mark -P /usr/share/wordlists/rockyou.txt 10.10.139.104 ftp         iterates over provided passws against FTP.
            hydra -l mark -P /usr/share/wordlists/rockyou.txt ftp://10.10.139.104       identical! different way to write.
            hydra -l frank -P /usr/share/wordlists/rockyou.txt 10.10.139.104 ssh        tries to login as frank over SSH using diff prov passws.
            CTRL + C                Once password found, end process.
        ]

        HYDRA OPTIONS:
        [
            -s PORT     specifies a non default port for service.
            -v  or -vv  verbosity
            -t n        where n is number of parallel connections.
            -d          debugging
        ]


    MITIGATION AGAINST PASSWORD ATTACKS:
        [
            * Strict Password policy        Ensures min password complexity
            * Account lockout               Locks after n failed attempts
            * Throttle Auth attempts        Manageable for user who knows password, pain for someone who is guessing
            * CAPTCHA                       (Completely Automated Public Turing test to tell Computers and Humans Apart)
                                            Requires solving a puzzle, difficult for machines. Works best in GUI environment.
            * PUBLIC CERTIFICATES           Works well for e.g SSH
            * Two Factor AUTH               Ask user to provide code from other means, email, text etc.
            * Other, sophisticated          May take, e.g IP based geolocation, to ensure it is established user.
        ]

    HYDRA PASSWORD ATTACK EXAMPLE!
    [
        * Either navigate to /usr/share/wordlists and find rockyou.txt      hydra -l lazie -P rockyou.txt 10.10.139.104 imap
            OR
        * Use hydra -l lazie -P usr/share/wordlists/rockyou.txt 10.10.139.104 imap
        * CTRL + C
    ]


SUMMARY:

Many other attacks can be performed against specific servers and protocols, such as:
[

    Vulnerability Research: This module provides more information about vulnerabilities and exploits.
    Metasploit: This module trains you on how to use Metasploit to exploit target systems.
    Burp Suite: This module teaches you how to use Burp Suite to intercept HTTP traffic and launch attacks related to the web.

]

PROTOCOL PORTS:
[
    Protocol 	TCP Port 	Application(s) 	                Data Security
    FTP 	    21 	        File Transfer 	                Cleartext
    FTPS 	    990 	    File Transfer 	                Encrypted
    HTTP 	    80 	        Worldwide Web 	                Cleartext
    HTTPS 	    443 	    Worldwide Web 	                Encrypted
    IMAP 	    143 	    Email (MDA) 	                Cleartext
    IMAPS 	    993 	    Email (MDA) 	                Encrypted
    POP3 	    110 	    Email (MDA) 	                Cleartext
    POP3S 	    995 	    Email (MDA) 	                Encrypted
    SFTP 	    22 	        File Transfer 	                Encrypted
    SSH 	    22 	        Remote Access + File Transfer 	Encrypted
    SMTP 	    25 	        Email (MTA) 	                Cleartext
    SMTPS 	    465 	    Email (MTA) 	                Encrypted
    Telnet 	    23 	        Remote Access 	                Cleartext
]

HYDRA OPTIONS:
[
    -l username 	            Provide the login name
    -P WordList.txt 	        Specify the password list to use
    server service 	            Set the server address and service to attack
    -s PORT 	                Use in case of non-default service port number
    -V or -vV 	                Show the username and password combinations being tried
    -d 	                        Display debugging output if the verbose output is not helping
]