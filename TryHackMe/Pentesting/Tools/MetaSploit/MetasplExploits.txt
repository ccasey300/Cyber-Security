Metasploit Exploits:
    * Topics to be covered:
    [
        How to scan target systems using Metasploit.
        How to use the Metasploit database feature.
        How to use Metasploit to conduct a vulnerability scan.
        How to use Metasploit to exploit vulnerable services on target systems.
        How msfvenom can be used to create payloads and obtain a Meterpreter session on the target system.
    ]

    PORT SCANNING:
        * Metasploit has a number of tools to scan open ports. Find them with [search portscan]
        [show options]
        ... where:
                CONCURRENCY: Number of targets to be scanned simultaneously.
                PORTS: Port range to be scanned. Please note that 1-1000 here will not be the same as using Nmap with the default configuration. Nmap will scan the 1000 most used ports, while Metasploit will scan port numbers from 1 to 10000.
                RHOSTS: Target or target network to be scanned.
                THREADS: Number of threads that will be used simultaneously. More threads will result in faster scans.

        * Can also use nmap through Metasploit! Example:    [nmap -sS 10.10.219.631]
        
        UDP SERVICE IDENTIFICATION:
            * [scanner/discovery/udp_sweep]     Quickly identify services running over UDP (User Datagram Protocol).

        SMB Scans:
            * Metasploit has many useful auxiliary modules that allow us to scan specific services.
            * For SMB:      [smb_enumshares and smb_version]


    EXAMPLE WORKFLOW:
        * [sudo nmap -sS IP_NUMBER]
        * [use scanner/discovery/udp_sweep]
        * [set rhosts IP_NUMBER]
        * [show options]                    make sure necessary options set
        * [run]


    Fuzzing SMB:
        * Trying to login to Penny SMB user.
        * [setg rhosts 10.10.164.183]
        * [use auxiliary(scanner/smb/smb_login)] 
        * [options]
        * [set SMBUser penny]
        * [set PASS_FILE C:\\CyberToolkit\\MetasploitWordlist-1632491116676.txt]
        * [run]         => password found!  leo1234



    THE METASPLOIT DATABASE:
        * In a real pen test, we will have multiple targets.
        * Metasploit has a database function for project management, avoid confusion when setting params.
        * Therefore need to set this up.

        * Start the PostgreSQL database [systemctl start postgresql]
        * Initialise the DB:    [sudo -u postgres msfdb init]       OR      [sudo -- -u postgres msfdb init]


        * To delete and start again:    [sudo -u postgres msfdb delete]


            NOT CONNECTING DATABASE?? Within KALI do:
            1.  Ensure POSTGRESQL is running:       [sudo systemctl enable --now postgresql]
            2.  If not online, run:                 [sudo pg_ctlcluster 17 main start]
            3.  Initialise MS DB:                   [sudo msfdb init]
            4.  Test msf role connects to DB:       [PGPASSWORD=$(sudo awk '/password:/ {print $2; exit}' /usr/share/metasploit-framework/config/database.yml); PGPASSWORD="$PGPASSWORD" psql -h localhost -U msf -d msf -c "\conninfo"]
            5.  Confirm METASPLOIT sees the DB:     [msfconsole -q -x "db_status; exit"]

                One shot:   [sudo systemctl enable --now postgresql && VER=$(ls /etc/postgresql | head -n1) && sudo pg_ctlcluster $VER main start || true && sudo msfdb init && PGPASSWORD=$(sudo awk '/password:/ {print $2; exit}' /usr/share/metasploit-framework/config/database.yml); PGPASSWORD="$PGPASSWORD" psql -h localhost -U msf -d msf -c "\conninfo" && msfconsole -q -x "db_status; exit"]

                DEBUG:
                [sudo systemctl enable --now postgresql]
                [sudo systemctl status postgresql --no-pager]       CHECK IF IT WORKED
                [ls /etc/postgresql/]           checks version of postgresql (17)
                [sudo pg_lsclusters]            verify it is running
                [sudo cat /usr/share/metasploit-framework/config/database.yml]      SHOW METASPLOIT DB CONFIG CONFIGURATION
                [sudo -u postgres psql -c "\du"]        CHECK THAT POSTGRESQL user MSF was created
                [PGPASSWORD='aew3DqEm7i4vjaA0hqDujbe2LK6zkaW22JHowf3goiw=' psql -h localhost -U msf -d msf -c "\conninfo"]
                        "Tries to test whether msf role can connect to msf DB"

        * Database features allow creation of different workspaces to separate projects.
            [workspace]                 Show current workspaces
            [workspace -a NAME]         Creates a new workspace called NAME
            [workspace NAME]            Navigate workspaces
            [workspace -h]              List available options for the workspace command.
            [help]                      While database attached, shows Database Backend Commands menu

            *** [db_nmap -sV -p- 10.10.12.229]      Runs nmap, saves results to database.
            ** [hosts] [services]       Information relevant to hosts and services running on target
            *  [hosts -h] [services -h] Show options

            * [services -S NAME]             Search for specific services in the environment.

            * After storing host information about the target:
                [hosts -R]              Adds host info to the RHOSTS parameter.


            Example workflow:
                * [use auxiliary/scanner/smb/smb_ms17_010]      uses vulnerability scanner
                * [hosts -R]            Sets RHOSTS parameter.
                * [show options]        Check values were assigned correctly.
                * [run] or [exploit]


            EASY CHECKS/ LOW HANGING FRUIT:
            [
                HTTP: Could potentially host a web application where you can find vulnerabilities like SQL injection or Remote Code Execution (RCE).
                FTP: Could allow anonymous login and provide access to interesting files.
                SMB: Could be vulnerable to SMB exploits like MS17-010
                SSH: Could have default or easy to guess credentials
                RDP: Could be vulnerable to Bluekeep or allow desktop access if weak credentials were used. 
            ]

        ** [show payloads] to examine commands for the given exploit.
        * [set payload]     confirm payload choice
        * Environmental or OS restrictions will narrow possible choices. (Firewall rules, anti-virus, etc.)

        * [CTR + Z]     Background the session.     [CTR + C]       Abort session.      [session -i]    interact with session no. i

        *** To leave current context (the selected exploit), use [back] command.

