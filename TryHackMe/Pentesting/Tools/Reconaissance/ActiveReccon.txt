Active Reconaissance:
    * Involves direct interaction with the target.
    * Going to learn how to use web browser as well as  ping, traceroute, telnet, and nc to gather info.
    * Active recon usually starts with some connection to a target machine. Perhaps unused SSH port.
    * Adversaries actions are logged, however it is possible to appear as regular activity.

    WEB BROWSER:
        * On the transport level, browser connects to: TCP p 80 when accessed over HTTP. TCP p 443 ...HTTPS.
        * Since these are default, not shown in address bar. However, we can specify port number.
        - Example: https://127.0.0.1:8834/  connects to localhost (127...) at port 8834 via HTTPS. If exists, page shown.
        - Developer tools: ctr + shift + I.
            ***Check out JS files using debugger!
        
        FIREFOX ADDONS:
            - FoxyProxy                      Easy to use proxy that allows simple changes of target.            https://addons.mozilla.org/en-US/firefox/addon/foxyproxy-standard
            - User Agent Switcher Manager:   Pretend accessing page from different browser/ OS.             https://addons.mozilla.org/en-US/firefox/addon/user-agent-string-switcher
            - Wappalyzer:                    Insights about the tech used on visited website. Appears as normal browsing traffic!               https://addons.mozilla.org/en-US/firefox/addon/wappalyzer

    PING:
    * Primary purpose to check whether you can reach the remote system, and whether it reaches you.
    * Ping sends a packet (ICMP Echo packet) to a remote system and awaits reply, noting the system is online.
    * ping -n 10 10.10.233.79       sends 10 packets.
    * Command: ping [-c count] [-i interval] [-I interface] [-W timeout] [-p pattern] [-s packetsize] [-t ttl] [-T timestamp option] [hop...] {destination} 
    
    ** ICMP (Internet Control Message Protocol) supports many queries.
    * However we are interested in ping (ICMP echo/type 8) and ping reply (ICMP echo reply/type 0).

    * ICMP header is 8 bytes!
    * MS Windows firewall blocks PING as standard!!!

        NO REPLY?
            * Reason 1:     Destination PC is unresponsive.
            * Reason 2:     Unplugged from network, faulty device not forwarding correctly.
            * Reason 3:     FIREWALL
            * Reason 4:     My PC is unplugged from network.

    * TRACEROUTE:
        * Traces the route taken by packets from my device to target host.
        * Helps find IPs of routers or hops taken from host -> host.
        * Windows: tracert 10.10.233.79         Linux:  traceroute 10.10.233.79
        * We rely on ICMP 'tricking' routers into disclosing IP.
        
        ** This can be accomplished by defining TTL (Time to Live)!
        * TTL IS NOT SECONDS. IT'S NUMBER OF HOPS BEFORE BEING DROPPED!!!! (routers passed)
        * When a router received packet it decrements TTL by 1. (--)
        * When this reaches 0, packet dropped and ICMP Time-to-Live exceeded is sent to original sender. 
        * Although some routers are configured not to send this message when packet dropped.

        * Traceroute sends UDP (User Datagram Protocol) within IP packets of TTL=1.
        * Then it sends with TTL=2, 3, etc.
        Command: traceroute tryhackme.com (L)   tracert tryhackme.com (W)

        UNDERSTANDING TR OUTPUT:
            * Each line corresponds to one router. Towards the end you will see times for each reply to reach us.
            * These are different as the three packets sent took different paths.
            * Seeing * ... * in output means we did not receive the expected ICMP time exceeded in transit messages.
            * Last line indicates the final hop prior to reaching the target Domain.
            * Number of hops/routers = number of lines of output.

    TELNET:
        * Telnet (teletype network) protocol uses port 23 as standard. 
        * SENT IN CLEAR TEXT! Hence, SSH (Secure Shell), is secure alternative.
        * Telnet relies on TCP protocol, hence we can use it to connect to any service running TCP.
        * Allows us to grab the service's banner and exchange a few messages, (unless encrypted!).
        
        EXAMPLE:
            - Lets say we wanted to discover more about web server listening on port 80. Connect to p 80 and use HTTP to communicate.
            - We issue GET / HTTP/1.1 for default index page, GET /page.html HTTP/1.1 for page.html. (Specifying HTTP version 2.2)
            - Need to specify host and hit enter twice.

            Commands:
            * telnet 10.10.233.79 80        (port 80)
            * GET / HTTP/1.1                (Specify HTTP version)
            * host: telnet
            ** press enter twice.

            Results:
            * Note server info! [Apache/2.4.61 (Debian) in this case]
    
    NETCAT:
        * Supports both TCP and UDP protocols!
        * Can function as a client that connects to listening port OR as a server that listens on a port of our choosing.
        * Similar to previous telnet, lets get the banner:
        - Note that host: doesn't matter, we're just naming the host.
            - nc 10.10.233.79 80        (port 80 for TCP when accessed using HTTP, 443 for HTTPS)
            - GET / HTTP/1.1
            - press SHIFT+ENTER
            - host: netcat
            - CTR + Z exits.

            ^^^ NOT WORKING? USE THIS: printf "GET / HTTP/1.1\r\nHost: netcat\r\nConnection: close\r\n\r\n" | nc -q 1 10.10.233.79 80
            ^ \r\n denotes new line.

            Windows:
            * netcat 10.10.233.79 80    ENTER
            * GET / HTTP/1.1            SHIFT+ENTER
            * host: netcat              ENTER ENTER

            printf "GET / HTTP/1.1\r\nHost: netcat\r\nConnection: close\r\n\r\n" | ncat 10.10.233.79 80

        EXAMPLE:
            * Using netcat to listen on TCP port, connect to a listening port on another system!
            * ON THE SERVER:    nc -vnlp 1234       (where we want to open port and listen)
            * ON THE CLIENT:    nc 10.10.233.79 PORT_NUMBER     

            - Server (10.10.233.79 IP): nc -vnlp 1234
            - Client:                   nc 10.10.233.79 1234

            - This setup echoes whatever is typed on one side of the TCP tunnel to the other.

            SERVER SIDE OPTIONS:
            ...where command: nc -vnlp 1234 being ran on server side!
                option 	        meaning
                -l 	            Listen mode
                -p 	            Specify the Port number
                -n 	            Numeric only; no resolution of hostnames via DNS
                -v 	            Verbose output (optional, yet useful to discover any bugs)
                -vv 	        Very Verbose (optional)
                -k 	            Keep listening after client disconnects


    SUMAMRY: 
        * The tools above are helpful in designing a primitive network scanner.
        * We could write a script that:
            1.  Traceroute to map path to target.
            2.  Ping to check if target is online. (ICMP echo reply)
            3.  Telnet to check what ports are available by trying to connect to them.

        LIST OF USEFUL COMMANDS:
            Command 	        Example
            ping 	            ping -c 10 10.10.233.79 on Linux or macOS
            ping 	            ping -n 10 10.10.233.79 on MS Windows

            traceroute 	        traceroute 10.10.233.79 on Linux or macOS
            tracert 	        tracert 10.10.233.79 on MS Windows

            telnet 	            telnet 10.10.233.79 PORT_NUMBER

            netcat as client 	nc 10.10.233.79 PORT_NUMBER
            netcat as server 	nc -lvnp PORT_NUMBER