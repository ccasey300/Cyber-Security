Nmap: Advanced Port Scans
    * Previously, we used TCP SYN to initiate a 3-way handshake. Can tell if port is open based on response.
    * What about other TCP flags?? E.g ACK. "Acknowledging data sent" when there was no data sent or received.
    
    * This room explains advanced scans & scan options. Some are useful against specific systems, others against particular network setups.
    
    Port scans to cover:
        
        Null Scan
        FIN Scan
        Xmas Scan
        Maimon Scan
        ACK Scan
        Window Scan
        Custom Scan

    As well as:
        
        Spoofing IP
        Spoofing MAC
        Decoy Scan
        Fragmented Packets
        Idle/Zombie Scan


    {NULL, FIN, XMAS}
    THE BELOW SCANS RELY ON RST RESPONSE TO INDICATE CLOSED.
    THEY ARE USEFUL WHEN SCANNING A TARGET BEHIND A STATELESS FIREWALL.
    STATELESS FIREWALLS WILL CHECK IF INCOMING PACKET IS SYN TO DETERMINE CONNECTION ATTEMPT.
    USING SOME OTHER COMBINATION OF FLAGS CAN TRICK THESE FIREWALLS!
    HOWEVER, STATEFUL FIREWALLS STILL BLOCK THIS ATTEMPT.

    1.  NULL SCAN
        * Doesn't set any flags! All flag bits set to 0. Use option  -sN
        * An open TCP port will not send anything back. Therefore no response means either firewall blocked or open port.
        * However, a closed TCP port will send RST response.
        * Cannot guarantee open port! Could be firewall rule blocking 

    2.  FIN SCAN
        * Sends a TCP packet with the FIN flag set. Use option -sF
        * Similiar to NULL, if nothing received indicates either open port or firewall blocking.
        * Target system will respond with RST if closed.

    3.  XMAS SCAN
        * An XMAS scan sets FIN, PSH and URG flags. Use option -sX
        * If RST is received, port is closed. Otherwise open/filtered.



    4.  TCP MAIMON SCAN
        * FIN and ACK bits are set. Certain BSD-derived systems drop the packet if it is an open port.
        * Thus open port is exposed. Use -sM
        * This is less useful, only in deprecated servers!
        * Most targets will respond with RST, nothing learned.


    {TCP ACK, Window, Custom Scan}

    5.  TCP ACK Scan
        * Sends a TCP packet with the ACK flag set. Use -sA option.
        * Target responds with RST regardless of port state, (No SYN received previously).
        * THIS IS USEFUL FOR DISCOVERING FIREWALLS & THEIR RULES! Based on RST response, we can tell what ports are not blocked.

    6.  TCP WINDOW SCAN
        * Very similiar except this time we examine the TCP Window field of the RST packets receieved.
        * On specific systems this will reveal open ports. Use option -sW
        * We expect to get response RST every time. Hence, against a system with no firewall we do not expect much info.
        * HOWEVER, when firewall exists, we see ports respond differently (closed).
        * These are not closed, they responded differently indicating the firewall does not block them.

    7.  CUSTOM SCAN
        * Used to experiment with set TCP flag combinations. Example: --scanflags RSTSYNFIN 
        * Will need to understand how different ports will behave to interpret results.

    NOTE:       ACK and Window are very useful for investigating and mapping firewall rules.
    REMEMBER:   JUST because a firewall is not blocking a certain port, doesn't mean a service is listening on that port!
    HENCE:      ACK AND Window expose firewall rules, not services.



    SPOOFING & DECOYS:
        * In some network setups we can use spoofed IP & even spoofed MAC address to scan a target.
        * This is only beneficial if we can guarantee capture of the response.
        * If we tried to scan a target from some random network using a spoofed IP, chances are that response will not be routed to us. Scan results unreliable.
        Example:    nmap -S SPOOFED_IP 10.10.229.91     nmap crafts all packets with this source IP.
        *** Target machine will respond by sending replies to THE SPOOFED IP!
        ** Therefore attacker must monitor network traffic to analyse replies.

        
            1. Attacker sends a packet with a spoofed source IP address to the target machine.
            2. Target machine replies to the spoofed IP address as the destination.
            3. Attacker captures the replies to figure out open ports.

        nmap -e NET_INTERFACE -Pn -S SPOOFED_IP 10.10.229.91
        ^This tells nmap explicitly what network interface to use and to not expect ping replies.
        ** AGAIN, THIS ATTACK IS USELESS IF WE CANNOT MONITOR NETWORK FOR RESPONSES.

        * We can also specify the source MAC address with --spoof-mac SPOOFED_MAC.
        * NOTE this is only possible if we are on the same ethernet or WiFi network!


        DECOYS:
            * Spoofing works only in certain scenarios where conditions are met. 
            * USE DECOY TO MAKE IT MORE CHALLENGING TO PINPOINT ATTACKER. Use option -D
            * Make the scan appear to be coming from many IP addresses so that the attackerâ€™s IP address would be lost among them.
            
            Example1:    nmap -D 10.10.0.1,10.10.0.2,ME 10.10.229.91     makes scan appear to come from ...0.1, ...0.2, ME (my IP addr)
            Example2:   nmap -D 10.10.0.1,10.10.0.2,RND,RND,ME 10.10.229.91     where 3rd and 4th are rand, 5th is my ip.
