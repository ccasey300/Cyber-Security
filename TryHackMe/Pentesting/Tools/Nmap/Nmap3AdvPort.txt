Nmap: Advanced Port Scans
    * Previously, we used TCP SYN to initiate a 3-way handshake. Can tell if port is open based on response.
    * What about other TCP flags?? E.g ACK. "Acknowledging data sent" when there was no data sent or received.
    
    * This room explains advanced scans & scan options. Some are useful against specific systems, others against particular network setups.
    
    Port scans to cover:
        
        Null Scan
        FIN Scan
        Xmas Scan
        Maimon Scan
        ACK Scan
        Window Scan
        Custom Scan

    As well as:
        
        Spoofing IP
        Spoofing MAC
        Decoy Scan
        Fragmented Packets
        Idle/Zombie Scan


    {NULL, FIN, XMAS}
    THE BELOW SCANS RELY ON RST RESPONSE TO INDICATE CLOSED.
    THEY ARE USEFUL WHEN SCANNING A TARGET BEHIND A STATELESS FIREWALL.
    STATELESS FIREWALLS WILL CHECK IF INCOMING PACKET IS SYN TO DETERMINE CONNECTION ATTEMPT.
    USING SOME OTHER COMBINATION OF FLAGS CAN TRICK THESE FIREWALLS!
    HOWEVER, STATEFUL FIREWALLS STILL BLOCK THIS ATTEMPT.

    1.  NULL SCAN
        * Doesn't set any flags! All flag bits set to 0. Use option  -sN
        * An open TCP port will not send anything back. Therefore no response means either firewall blocked or open port.
        * However, a closed TCP port will send RST response.
        * Cannot guarantee open port! Could be firewall rule blocking 

    2.  FIN SCAN
        * Sends a TCP packet with the FIN flag set. Use option -sF
        * Similiar to NULL, if nothing received indicates either open port or firewall blocking.
        * Target system will respond with RST if closed.

    3.  XMAS SCAN
        * An XMAS scan sets FIN, PSH and URG flags. Use option -sX
        * If RST is received, port is closed. Otherwise open/filtered.



    4.  TCP MAIMON SCAN
        * FIN and ACK bits are set. Certain BSD-derived systems drop the packet if it is an open port.
        * Thus open port is exposed. Use -sM
        * This is less useful, only in deprecated servers!
        * Most targets will respond with RST, nothing learned.


    {TCP ACK, Window, Custom Scan}

    5.  TCP ACK Scan
        * Sends a TCP packet with the ACK flag set. Use -sA option.
        * Target responds with RST regardless of port state, (No SYN received previously).
        * THIS IS USEFUL FOR DISCOVERING FIREWALLS & THEIR RULES! Based on RST response, we can tell what ports are not blocked.

    6.  TCP WINDOW SCAN
        * Very similiar except this time we examine the TCP Window field of the RST packets receieved.
        * On specific systems this will reveal open ports. Use option -sW
        * We expect to get response RST every time. Hence, against a system with no firewall we do not expect much info.
        * HOWEVER, when firewall exists, we see ports respond differently (closed).
        * These are not closed, they responded differently indicating the firewall does not block them.

    7.  CUSTOM SCAN
        * Used to experiment with set TCP flag combinations. Example: --scanflags RSTSYNFIN 
        * Will need to understand how different ports will behave to interpret results.

    NOTE:       ACK and Window are very useful for investigating and mapping firewall rules.
    REMEMBER:   JUST because a firewall is not blocking a certain port, doesn't mean a service is listening on that port!
    HENCE:      ACK AND Window expose firewall rules, not services.



    SPOOFING & DECOYS:
        * In some network setups we can use spoofed IP & even spoofed MAC address to scan a target.
        * This is only beneficial if we can guarantee capture of the response.
        * If we tried to scan a target from some random network using a spoofed IP, chances are that response will not be routed to us. Scan results unreliable.
        Example:    nmap -S SPOOFED_IP 10.10.229.91     nmap crafts all packets with this source IP.
        *** Target machine will respond by sending replies to THE SPOOFED IP!
        ** Therefore attacker must monitor network traffic to analyse replies.

        
            1. Attacker sends a packet with a spoofed source IP address to the target machine.
            2. Target machine replies to the spoofed IP address as the destination.
            3. Attacker captures the replies to figure out open ports.

        nmap -e NET_INTERFACE -Pn -S SPOOFED_IP 10.10.229.91
        ^This tells nmap explicitly what network interface to use and to not expect ping replies.
        ** AGAIN, THIS ATTACK IS USELESS IF WE CANNOT MONITOR NETWORK FOR RESPONSES.

        * We can also specify the source MAC address with --spoof-mac SPOOFED_MAC.
        * NOTE this is only possible if we are on the same ethernet or WiFi network!


        DECOYS:
            * Spoofing works only in certain scenarios where conditions are met. 
            * USE DECOY TO MAKE IT MORE CHALLENGING TO PINPOINT ATTACKER. Use option -D
            * Make the scan appear to be coming from many IP addresses so that the attackerâ€™s IP address would be lost among them.
            
            Example1:    nmap -D 10.10.0.1,10.10.0.2,ME 10.10.229.91     makes scan appear to come from ...0.1, ...0.2, ME (my IP addr)
            Example2:   nmap -D 10.10.0.1,10.10.0.2,RND,RND,ME 10.10.229.91     where 3rd and 4th are rand, 5th is my ip.


        FRAGMENTED PACKETS:
            Firewall:   
                * Piece of hardware/ software that permits packets or blocks them based on rules.
                * Rules either: Blocking all traffic but exceptions   OR  Allow all traffic but block exceptions.
                * Traditionally, inspects at least the IP header and transport layer header.
                * A more advanced firewall would try to inspect the data carried on the transport layer. (DPI?)
                
            Intrusion Detection System (IDS)
                * Inspects network packets for select behavioural patterns or specific content signatures.
                * Raises an alert whenever a malicious rule is met.
                * IDS inspects IP & transport layer headers as well as data on transport layer, checking for malicious patterns.
                
            ** It is difficult to bypass these. however, one strategy is to divide packet into several smaller packets.

            * Nmap allows fragmentation of packets with option -f. This divides the IP data into 8 bytes or less.
            * -ff divides data into 16-byte fragments vs 8.
            *** Check out IP HEADER file.

            IP Header:
                * Source address takes 32 bits (4 bytes), destination address takes the same.
                * DATA is what we are going to fragment.
                * To do this, must aid reassembly. Done by recipient
                    IP uses Identification (ID) and fragment offset to reassemble fragmented packets.

            * Example: Stealth TCP SYN Scan on port 80, non fragmented vs fragmented
                sudo nmap -sS -p80 10.20.30.144
                sudo nmap -sS -p80 -f 10.20.30.144      -f fragments, default IP data divided into 8 bytes or less.

            
        IDLE/ ZOMBIE SCAN:
            * Spoofing is good for stealth scanning, however only works in certain network setups.
            * Requires hacker to be in a position to monitor network traffic.
            * We can upgrade this potential with idle scan!

            * Idle/ zombie scan requires an idle system connected to the network for us to communicate with.
            * Practically, nmap makes each probe appear as though it is coming from this idle machine.
            * Then, nmap will check for signs that idle received any responses to the spoofed probe.
            * This is accomplished by checking the IP ID value in the IP header.
            nmap -sI ZOMBIE_IP MACHINE_IP, where ZOMBIE_IP is the IP address of the idle host

            Idle scan follows:
                1.  Trigger the idle host to respond so that you can record the current IP ID on the idle host.
                2.  Send a SYN packet to a TCP port on the target. The packet should be spoofed to appear as if it was coming from the idle host (zombie) IP address.
                3.  Trigger the idle machine again to respond so that you can compare the new IP ID with the one received earlier.
    
            * Attacker probes an idle machine (printer) with TCP SYN/ACK.
            * Receives RST packet containing idle machine newly incremented IP ID.

            * Attacker sends TCP SYN packet to the TCP port for the TARGET machine.
            ** HOWEVER this uses the idle host's IP address as the source!!
            Then there are 3 scenarios:
                1.  TCP port closed, signified by target sending RST to idle machine. Idle host doesn't respond, IP ID not incremented.
                2.  TCP port open, target responds sending SYN/ACK to idle host. Idle host responds to unexpected packet with RST, increments its IP ID!
                3.  Target machine does not respond at all due to firewall rules. Same as closed port, idle host doesn't respond, IP ID not incremented.
            * Then attacker sends another TCP SYN/ACK to the idle host. Idle host responds with RST, incrementing IP ID.
            * Attacker then compares the IP ID of the RST packet from the first step to that of the third step.
            ** IF THE DIFFERENCE (IP ID) IS 1: PORT CLOSED/FILTERED
                    IF 2, PORT ON TARGET MACHINE WAS OPEN.
            
            * This scan totally relies on the idle host being IDLE! 
            ** If the idle host is busy, all returned IP IDs would be useless.
            ** Add --reason option to make nmap explain its reasoning. -v   -vv for verbose
            ** Debugging: -d    -dd   
            * SYN/STEALTH nmap -sS -F --reason MACHINE_IP



SUMMARY:
    We covered the following scans:
        Port Scan Type 	        Example Command
        TCP Null Scan 	        sudo nmap -sN 10.10.142.219
        TCP FIN Scan 	        sudo nmap -sF 10.10.142.219
        TCP Xmas Scan 	        sudo nmap -sX 10.10.142.219
        TCP Maimon Scan 	    sudo nmap -sM 10.10.142.219
        TCP ACK Scan 	        sudo nmap -sA 10.10.142.219
        TCP Window Scan 	    sudo nmap -sW 10.10.142.219
        Custom TCP Scan 	    sudo nmap --scanflags URGACKPSHRSTSYNFIN 10.10.142.219
        Spoofed Source IP 	    sudo nmap -S SPOOFED_IP 10.10.142.219
        Spoofed MAC Address 	--spoof-mac SPOOFED_MAC
        Decoy Scan 	            nmap -D DECOY_IP,ME 10.10.142.219
        Idle (Zombie) Scan 	    sudo nmap -sI ZOMBIE_IP 10.10.142.219


    We used some options:
        --source-port PORT_NUM      specify source port number
        --data-length NUM           append random data to reach given length

        Fragment IP data into 8 bytes 	-f
        Fragment IP data into 16 bytes 	-ff

        --reason 	                explains how Nmap made its conclusion
        -v 	                        verbose
        -vv 	                    very verbose
        -d 	                        debugging
        -dd 	                    more details for debugging


    * These scans rely on prompting a reply after setting TCP flags in an unexpected way.
    * NULL, FIN & XMAS scans provoke a reponse from closed ports.
    * Maimon, ACK & Window scans provoke a reponse from both closed and open ports.
    