 Nmap: Basic Port Scans
    * Previously covered enumerating targets, discovering live hosts and reverse DNS lookup. Next up:
    ...
        4.  Scan ports.
    ...

    * We will go through:
        1. TCP Connect port scan.
        2. TCP SYN port scan.
        3. UDP port scan.

    TCP & UDP PORTS:
        * In the same way that IP specifies a host on a network, PORT specifies a particular network service running.
        * Server provides a network service, adheres to a certain protocol.
        * Example: HTTP Server binds to TCP port 80 by default. HTTPS: TCP port 443.
        
        * Useful ports: TCP 80 (HTTP), TCP 443 (HTTPS), TCP 22 (SSH), UDP 53 (DNS).

        Ports are either: 
            - Open and some service is listening on that port.
            - Closed, no service listening.

        * However, firewalls interfere with this. Really there are six states (nmap):
            
            1. Open: indicates that a service is listening on the specified port.
            2. Closed: indicates that no service is listening on the specified port, although the port is accessible. By accessible, we mean that it is reachable and is not blocked by a firewall or other security appliances/programs.
            3. Filtered: means that Nmap cannot determine if the port is open or closed because the port is not accessible. This state is usually due to a firewall preventing Nmap from reaching that port. Nmap’s packets may be blocked from reaching the port; alternatively, the responses are blocked from reaching Nmap’s host.
            4. Unfiltered: means that Nmap cannot determine if the port is open or closed, although the port is accessible. This state is encountered when using an ACK scan -sA.
            5. Open|Filtered: This means that Nmap cannot determine whether the port is open or filtered.
            6. Closed|Filtered: This means that Nmap cannot decide whether a port is closed or filtered.

    TCP FLAGS:
        * Nmap supports different types of TCP port scans. 
        * TCP Header: first 24 bytes of TCP segment. 
        * Header is 6 rows: 1. src & dest port numbers.     2. Sequence number. 
                            3. Acknoledgement number.       3. TCP flag!!!
        
        * TCP flag: 6 bits, to set the flag make it 1. The 6 possible flags:
            1.  URG: Urgent flag indicates that the urgent pointer filed is significant. The urgent pointer indicates that the incoming data is urgent, and that a TCP segment with the URG flag set is processed immediately without consideration of having to wait on previously sent TCP segments.
            2.  ACK: Acknowledgement flag indicates that the acknowledgement number is significant. It is used to acknowledge the receipt of a TCP segment.
            3.  PSH: Push flag asking TCP to pass the data to the application promptly.
            4.  RST: Reset flag is used to reset the connection. Another device, such as a firewall, might send it to tear a TCP connection. This flag is also used when data is sent to a host and there is no service on the receiving end to answer.
            5.  SYN: Synchronize flag is used to initiate a TCP 3-way handshake and synchronize sequence numbers with the other host. The sequence number should be set randomly during TCP connection establishment.
            6.  FIN: The sender has no more data to send.
    
    TCP CONNECT SCAN:
        * Works by completing the 3-way TCP handshake. (SYN, SYN ACK, ACK)
        * Since we are not interested in connection, (only whether port is open):
            Connection torn by sending RST/ACK as soon as state is confirmed.
        ** Use flag -sT to run TCP connect.
        * NOTE if not sudo/ privileged, TCP connect scan is only option to disc open TCP ports.
        * A closed TCP port responds to a SYN packet with RST/ACK.
        