Burp Suite Intruder:
    * Used to automate and customise attacks. Allows mods and repetitive testing with var input.
    * Useful for fuzzing and brute-forcing. Sends multiple attacks with user defined configuration.
    * Similar functionality to ffuf and Wfuzz! Uses wordlists to test.
    * Due to rate limitation, tend to go for ffuf.

    - What is fuzzing? Testing functionality or existence by applying a data set to a param. E.g appending wordlist to URL. 
    
    - ctr + I sends to intruder.
    
    There are four sections to the intruder category:
        * Positions: Choose attack type, configure where payload is inserted.
        * Payloads: Define values, wordlist. Also allows modification of Intruder's behaviour. 
            Example:    defining pre processing rules, match and replace, add suffix/ prefix.
        * Resource Pool: Unimportant.
        * Settings: Configure attack behaviour. How Burp handles results, what to listen for, etc.
    
    POSITIONS:
        * Tells BS where in the request we wish to insert our payloads.
        * Sections highlighted in green show probable locations.
        * On the right side we see: 
            - Add §:        Deine new positions by highlighting text, clicking.
            - Clear §:      Removes all positions.
            - Auto §:       Attempts to locate probable positions.

        *** TO TYPE SECTION SIGN (§) use alt + 21.

    PAYLOAD
        PAYLOAD SETS:
            * Create, assign and configure payloads.
            Four sections:
                - Payload sets:     Choose position to configure payload set, select type of payload
                                    Attack types requiring >1 payload set, (pitchfork, cluster bomb), use payload set drop down.
                                    When assigning, work top->bottom, L->R. username=§pentester§&password=§Expl01ted§, the first item in the payload set dropdown would refer to the username field, and the second item would refer to the password field.
        PAYLOAD SETTINGS:
            Specific options for the payload type/ current payload set.
            Using "Simple List" type we can add/ remove payloads to/from set. Add text, paste lines or load payloads from a file.
        
        PAYLOAD PROCESSING:
            Define rules to be applied to each payload in the set prior to sending to target.
            E.g capitalise every word, skip payloads that match regex pattern, apply transforms or filtering.
        
        PAYLOAD ENCODING: 
            Customise encoding options for payload.
            By default, applie URL encoding to ensure safe transmission. 
            Can modify the list of chars to be encoded.

            - URL encoding: process of converting unsafe/ reserved chars to readable, safe ones that can be understood by server. Lots of %num%num
            
    ATTACK TYPES: 
        - Intruder offers 4 attacks in Positions. 
            * Sniper:           Most common. Inserts one payload at a time into each position defined in request. Iterates through payloads linearly.
            * Battering ram:    Sends all payloads simultaneously. Useful for race conditions or when need to send payloads concurrently.
            * Pitchfork:        Enables simultaneous testing of multiple positions with different payloads. Allows definition of multiple payload sets at some position.
                                Great for distinct parameters that need individual testing.
            * Cluster Bomb:     Combination of sniper and pitchfork attacks. Sniper like attack on each position, simultaneously tests all payloads from each set,.
                                Useful when we want to test multiple payloads at different positions all together.

    SNIPER:
        * Useful for single position attacks. E.g password brute-force or URL fuzzing.
        * We provide a set of payloads (wordlist or numbers range), intruder inserts each payload into each defined position.
        * requests = numberOfWords * numberOfPositions
        * 1 set of payloads.
        e.g username=burp&password=Expl01ted, username=suite&password=Expl01ted

    BATTTERING RAM:
        * Places the same payload in every position simultaneously.
        * Differs Sniper, doesnt place each payload into each position in turn.
        * Acts like a brute forcer.
        * Useful attack when we need to test the same payload at different positions, no need for sequential testing.
        * e.g username=burp&password=burp

    PITCHFORK:
        * Similar to performing multiple Sniper attacks simultaneously.
        * Pitchfork utilises one payload set per position and iterates through them. (Max 20)
        * Example: two wordlists for two positions
            username=joel&password=J03l, username=harriet&password=Emma1815
            ... first item from each list, second... etc.
        * Intruder stops once any list is complete! Payload sets should be of equal size.
        * Useful when conducting credential-stuffing, multiple positions require separate payload sets.
    
    CLUSTER BOMB:
        * Allows multiple payload sets for multiple positions, unlike pitchfork, tests every combination.
        * Example: username=joel&password=J03l, username=harriet&password=J03l, username=alex&password=J03l
        * Generates significant network traffic. number of combos = payloadset1size * payloadset2size *....
        * Caution, moderate payload set size leads to slow attack, rate limiter in BS doesn't help.
        * Great for credential brute-forcing where mapping between usernames and passwords unknown.
    

    Example: 
        * Checking if leaked passwords were changed. 
        * wget http://10.10.182.13:9999/Credentials/BastionHostingCreds.zip
        * Since we have corresponding passwords and usernames, we do credential-stuffing instead of brute-force.
        * Therefore PITCHFORK!
        * NOTE! Sorting by length, timeout, error will help to find successful attempt.

        Steps:
            1.  Download wordlists.
            2.  Navigate to appropriate URL, capture request using PROXY, send to intruder. ctr + I
            3.  POSITIONS tab, get rid of extra positions.
            4.  Choose attack type (pitchfork).
            5.  PAYLOADS, payload options, choose load and select wordlist.
            6.  Start attack. Identify what was successful. Potentially using response length. (If response code does not differ).

    CHALLENGE:
        * Presented with ticket dashboard, int identifiers. Not hard to guess, long ints!
        * Two possibilities: Correct access controls or IDOR vuln exists.
        * So, use sniper attack where pos - http://URL/pos - with range 0-100.

    EXTRA MILE:
        * Go to http://URL/admin/login and capture request for login. Check response within logger.
        * Set-Cookie: session=eyJTdXBwb3J0QXV0aCI6IlRydWUiLCJTdXBwb3J0SUQiOjMsInRva2VuSUQiOiI1Y2Y4M2YxYTJiYWQ0NDkzZWEwZDJmMjM4ZDNiOWM2OSJ9.aMkiTg.S8Rk4XwQiBdgAAfwREEbAck52E4; HttpOnly; 
        * Cookies are session tokens that increase brute-force resilience.
        Method:
            - Add lists as per. We need to find a way to grab the ever-changing loginToken and session cookie.
            - Unfortunately recursive grep/ intruder will not work alone due to redirect. We need to create a macro.
            - Macros allows to perform same set of actions. In this case GET request to admin/login/
            Steps:
                1. Select main settings (top right).
                2. Click on sessions tab.
                3. Scroll to macros and click ADD. Look for the GET request to admin. If not there, go to browser and make request.
                4. Click OK. Name and OK.
                5. Need to set session handling rules. Within Sessions go to session handling rules.
                6. Add new rule, go to scope tab. In tools scope unselect each box except intruder.
                7. In URL scope, use suite scope. Add base URL to scope (http://10.10.191.239/)
                8. Details tab, rules action section. Click Add, run a macro. Select previously created macro.

                **As it stands, macro will overwrite params in intruder requests before we send. Great!
                * This means loginTokins and session cookies added straight into requests.
                * Still need to restrict which cookies/ params are updated before we start attack.

                9. Update only the following params... click edit. In 'enter new item' type loginToken, Add, close.
                10. Update only the following cookies... edit, enter new item, 'session', add, close. Okay.
                
                ** Now we have defined a macro that will substitute CSRF token and cookie.
                * CSRF token: 

                11. Switch back to intruder and start attack. 403 response bad, 302 good. Sort by length and look for short.
                
