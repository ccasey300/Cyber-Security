Race Conditions:
    * We are going to use Burp Suite repeater to investigate race conditions vulnerability.
    
    First, some definitions:
    A program is:           A static set of instructions to achieve a task. Unless executed, nothing happens.
    A process is:           A program in execution, dynamic. Often interrupted & paused. Uses memory (temporary storage).
    A state is:             (Re: process) New->Ready->Running->Waiting->Terminated.
    A thread is:            A lightweight unit of execution. Shares memory and instructions with process.

    Server handling requests: (2 types)
        Serial: One process is running; it serves one user after the other sequentially. New users are enqueued.
        Parallel: One process is running; it creates a thread to serve every new user. New users are only enqueued after the maximum number of running threads is reached.
    
    Analogy: 
    Two hosts taking reservations receive a res for a specific table from two different customers.
    Who gets it?
    Race condition!

    => One thread checks a value and makes an action based on it.
    => Another updates it prior to the original action.
    
    Causes:
    * Parallel Execution: Web servers may execute multiple requests in parallel to handle concurrent user interactions. If these requests access and modify shared resources or application states without proper synchronization, it can lead to race conditions and unexpected behaviour.
    * Database Operations: Concurrent database operations, such as read-modify-write sequences, can introduce race conditions. For example, two users attempting to update the same record simultaneously may result in inconsistent data or conflicts. The solution lies in enforcing proper locking mechanisms and transaction isolation.
    * Third-Party Libraries and Services: Nowadays, web applications often integrate with third-party libraries, APIs, and other services. If these external components are not designed to handle concurrent access properly, race conditions may occur when multiple requests or operations interact with them simultaneously.

    Web Applications follow Client-Server model:
    Client: The client is the program or application that initiates the request for a service. For example, when we browse a web page, our web browser requests the web page (file) from a web server.
    Server: The server is the program or system that provides these services in response to incoming requests. For instance, the web server responds to an incoming HTTP GET request and sends an HTML page (or file) to the requesting web browser (client).

    Using BS to exploit race conditions:
    * Say a cash transfer uses POST.
    * Right click, sent to repeater. Go to repeater, click + and name tab group. Include previous request.
    * Use ctr + R to duplicate request. Send ^ gives options of how the requests are sent.
    * Sending in parallel results in race condition!!

    Mitigation:
    * Internal clock.
    * Atomic operations.
    * Database transactions (Grouping multiple actions into one).

