Server Side Request Forgery (SSRF):
    * An SSRF vulnerability can expose internal resources.
    * ' allows a malicious user to cause the webserver to make an additional or edited HTTP request to the resource of the attacker's choosing.'
    * Two types: regular SSRF, blind SSRF.
        Regular SSRF:
            * Data is returned to the attacker's screen.
        Blind SSRF: 
            * No information is returned to the attacker's screen.

    * A successful SSRF attack can result: 
        - Unauthorised areas access, access to customer data, scale to internal networks, reveal AUTH tokens/creds.
    
    * http://website.thm/stock?url=...
    * Attacker can edit URL to = api.website.thm/api/user so that web app makes request to api server.
    * Potentially leading to user data being returned from the API, website forwards to hacker.
    * Often paired with Directory Traversal (../../) to access unauth repos.
    * Attacker can control subdomain(...stock?server = )
    * Attacker can also force the webserver to request a server of the hacker's choice. (?url=)
    * Hence, request headers are sent to the hackers domain. Could contain AUTH creds or API keys sent by target website.

        ** ...server=expectedserver     ----->    server=server.website.thm/flag?id=9&x=
        ...where &x= ignores any appendage. (x=what's appended).
    
    Common places to look for SSRF:
        * when a full URL is used in a parameter in the address bar [...server=http://server.com]
        * A hidden field in a form. (value=http://server.com)
        * Partial URL such as just the hostname. (...server=api)
        * Or path of URL. (...dst=/forms/contact)

    BLIND SSRF:
        * No information is returned, hence need an external HTTP logging tool. (BurpSuite, Requestbin)
    
    * Savvy developers will implement checks on requested resource. Either deny list or allow list.

    DENY list: All requests accepted except THESE. THESE could be a list or some pattern.
        - localhost and 127.0.0.1 are endpoints that should be restricted.
        - This could be bypassed by using alternate localhost references:
            + 0
            + 0.0.0.0
            + 0000
            + 127.1
            + 127.*.*.*
            + 2130706433
            + 017700000001 
            + Or other subdomain that has DNS record that resolves to 127.0.0.1. e.g 127.0.0.1.nip.io.

        * In a cloud setting, 169.254.169.254 contains metadata for the cloud server.

    ALLOW List: Requests are blocked unless they match a pattern/ appear on list.
    * Example: URL used in a parameter must begin with https://website.thm
        - Attacker could create a subdomain on an attacker's domain called  https://website.thm.attackers-domain.thm. 
    
    Open Redirect:
    * If the above bypass didn't work, one more trick: open redirect.
    * Open redirect is an endpoint that automatically redirects to another website address. (e.g tracking referrals)
    * Attacker can potentially redirect the internal HTTP request to a domain of their choosing.
    ** Used to bypass strict rules.

THM Challenge: 
    * In this example, targeting Acme IT again. We know two endpoints: /private gives access error, /customers/new-account-page new feature avatars.
    * Inspecting the source code on avatar page, avatar form field value = path to image.
    * Updating avatar and inspecting, we see an encoded URL for what was selected. 
    * Now we try to update this value to private to get past IP block. to do so:
        - Right click on one of the radio buttons for an avatar.
        - Edit value of this to 'private'.
        - Update avatar to this value. However, clearly a deny list in place. (URL cannot start with private)
        - But, we can use directory traversal! set value to x/../private
        - If successful, we can view page source and contents from /private should be contained in avatar.
        - Decode as necessary. (base64)
        