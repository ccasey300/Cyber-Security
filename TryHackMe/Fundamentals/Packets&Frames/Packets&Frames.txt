"Packets and Frames: How data is divided and sent"
    * Small chunked data, when combined they make a message or larger piece of information.
    * Packets: [Piece of data from Network layer (3). Contains information such as IP header & payload.]
    * Frames: [Used at Data Link layer (2), encapsulating the packet and adding some info, (E.g MAC).]
    * When we are talking about anything IP addresses, we are talking about packets.
    * When the encapsulating info is stripped away, we are left with the frame.

    i.e "If IP info included, it's a packet. If not, it's a frame. Because layer 2 strips encapsulation!"

    * Because packets are small pieces of info, they reduce bottlenecking in the network.
    * Different packets, different structures.
    * Protocols and standards act as rules for how the packet is handled on a device.

    "IP Packet Example:"
        * Set of headers that define additional info to the data being sent (e.g a file).
        
        Header 	            |       Description

        Time to Live 	    |       This field sets an expiry timer for the packet to not 
                                    clog up your network if it never manages to reach a host or escape!

        Checksum 	        |       This field provides integrity checking for protocols 
                                    such as TCP/IP. If any data is changed, this value will 
                                    be different from what was expected and therefore corrupt.

        Source Address 	    |       The IP address of the device that the packet is being sent 
                                    from so that data knows where to return to.

        Destination Address |   	The device's IP address the packet is being sent to 
                                    so that data knows where to travel next.


    "Transmission Control Protocol (TCP):"
        * TCP/IP is a summary of the OSI model. It's four layers are:
                [Application, Transport, Internet, Network Interface]
        * Similiarly to OSI, info is added to each layer of TCP model as the packet traverses it.
        * TCP is connection based. Must establish a connection between client and server b4 data is sent.
        * TCP guarantees any data sent will be received on the other end.

        "TCP Headers:"
            Header	            |           Description

            Source Port	        |           This value is the port opened by the sender to send the TCP packet from. 
                                            This value is chosen randomly (out of the ports from 0-65535 
                                            that aren't already in use at the time).
                                            
            Destination Port	|           This value is the port number that an application or service is 
                                            running on the remote host (the one receiving data); for example, 
                                            a webserver running on port 80. Unlike the source port, 
                                            this value is not chosen at random.

            Source IP	        |           This is the IP address of the device that is sending the packet.

            Destination IP	    |           This is the IP address of the device that the packet is destined for.

            Sequence Number	    |           When a connection occurs, the first piece of data transmitted is given a random number. 
                                            We'll explain this more in-depth further on.

            Acknowledgement Num |       	After a piece of data has been given a sequence number, the number for the 
                                            next piece of data will have the sequence number + 1. We'll also explain this more in-depth further on.

            Checksum	        |           This value is what gives TCP integrity. A mathematical calculation is made 
                                            where the output is remembered. When the receiving device performs the mathematical calculation, 
                                            the data must be corrupt if the output is different from what was sent.
                                            
            Data	            |           This header is where the data, i.e. bytes of a file that is being transmitted, is stored.

            Flag	            |           This header determines how the packet should be handled by either device 
                                            during the handshake process. Specific flags will determine specific behaviours, 
                                            which is what we'll come on to explain below.


        "TCP 3-Way Handshake:"
            1	SYN	A SYN message is the initial packet sent by a client during the handshake. 
                This packet is used to initiate a connection and synchronise the two devices 
                together (we'll explain this further later on).

            2	SYN/ACK	This packet is sent by the receiving device (server) to acknowledge the synchronisation attempt from the client.

            3	ACK	The acknowledgement packet can be used by either the client or server to acknowledge 
                that a series of messages/packets have been successfully received.

            4	DATA	Once a connection has been established, data (such as bytes of a file) is sent via the "DATA" message.

            5	FIN	This packet is used to cleanly (properly) close the connection after it has been complete.
            
            #	RST	This packet abruptly ends all communication. This is the last resort and indicates there was 
                some problem during the process. For example, if the service or application is not working correctly, 
                or the system has faults such as low resources. 

        "Sequence Number:"
            * Any data sent is given a random sequence number. Data is reconstructed by incrementing it to determine order.
                1.  SYN - Client: Here's my Initial Sequence Number(ISN) to SYNchronise with (0)
                2.  SYN/ACK - Server: Here's my Initial Sequence Number (ISN) to SYNchronise with (5,000), and I ACKnowledge your initial number sequence (0)
                3.  ACK - Client: I ACKnowledge your Initial Sequence Number (ISN) of (5,000), here is some data that is my ISN+1 (0 + 1)

        "TCP: Closing a Connection"
            * Once sender determines that recipient has received all data, initiates closure with FIN packet.
            * Best practice is to close TCP ASAP. Due to TCP reserving system resources (ports).
                1. Client sends FIN
                2. Server sends ACK + FIN
                3. Client sends ACK


    "User Datagram Protocol (UDP):"
        * UDP is another protocol used to communicate data between two devices.
        * Unlike TCP, UDP is stateless and does not require a constant connection.
        * No 3-way handshake, no synchronisation.
        * Much faster than TCP. If we can tolerate packet loss, (video call), use UDP.
        * No guarantees (data integrity), no regard for whether sent packets were received.

        Advantages of UDP	            |           Disadvantages of UDP
        UDP is much faster than TCP.	|           UDP doesn't care if the data is received or not.
        UDP leaves the application      |
        (user software) to decide if    |
        there is any control over how   |
        quickly packets are sent.	    |
                                        |           It is quite flexible to software developers in this sense.
        UDP does not reserve a          |
        continuous connection on a      |
        device as TCP does.	            |           This means that unstable connections result in a terrible experience for the user.

        * UDP packets are simpler than TCP.
        "UDP Headers:"
            Time to Live (TTL)      This field sets an expiry timer for the packet, so it doesn't clog up your network if it never manages to reach a host or escape!
            Source Address	        The IP address of the device that the packet is being sent from, so that data knows where to return to.
            Destination Address	    The device's IP address the packet is being sent to so that data knows where to travel next.
            Source Port	            This value is the port that is opened by the sender to send the UDP packet from. This value is randomly chosen (out of the ports from 0-65535 that aren't already in use at the time).
            Destination Port	    This value is the port number that an application or service is running on the remote host (the one receiving the data); for example, a webserver running on port 80. Unlike the source port, this value is not chosen at random.
            Data	                This header is where data, i.e. bytes of a file that is being transmitted, is stored.

    

    "Ports:"
        * Essential point in which data is exchanged. Data sent must arrive at an appropriate port.
        * Ports enforce strict rules when communicating with one another.
        * Ports are a numerical value between 0 and 65,535. Hence, issue could be losing track of what is where.
        * Solution is to associate certain applications/ softwares and behaviours with set of rules.
        * E.g forcing web browser data to be sent through port 80.
        * Any port between 0 and 1024 is considered a 'common port.'


    "Common Ports"
    Protocol	                    Port Number	        Description

    File Transfer Protocol (FTP)	21	                This protocol is used by a file-sharing application built on a client-server model, meaning you can download files from a central location.
    Secure Shell (SSH)	            22	                This protocol is used to securely login to systems via a text-based interface for management.
    HTTP	                        80	                This protocol powers the World Wide Web (WWW)! Your browser uses this to download text, images and videos of web pages.
    HTTPS	                        443	                This protocol does the exact same as above; however, securely using encryption.
    Server Message Block (SMB)	    445	                This protocol is similar to the File Transfer Protocol (FTP); however, as well as files, SMB allows you to share devices like printers.
    Remote Desktop Protocol (RDP)	3389	            This protocol is a secure means of logging in to a system using a visual desktop interface (as opposed to the text-based limitations of the SSH protocol).

    * Check out this link for 1024 common ports: "http://www.vmaxx.net/techinfo/ports.htm"
    